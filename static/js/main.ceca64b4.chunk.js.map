{"version":3,"sources":["pages/login.tsx","components/tokenwallet.tsx","components/creator.tsx","pages/wallet.tsx","components/objectwallet.tsx","App.tsx","serviceWorker.ts","index.tsx","state/store.tsx","../node_modules/tupelo-wasm-sdk/lib/js/go sync","util/appcommunity.ts"],"names":["Actions","usernameKey","namespace","Buffer","from","publicUserKey","userName","a","EcdsaKey","passPhraseKey","usernameTimeout","initialState","loading","username","password","checkUsername","state","dispatch","later","getAppCommunity","c","console","log","key","Tupelo","ecdsaPubkeyToDid","publicKey","did","tree","undefined","getTip","tip","ChainTree","store","blockservice","type","userTree","clearTimeout","setTimeout","reducer","action","loginFormType","act","passwordFormType","registering","loggingIn","Error","isAvailable","UsernameField","onChange","Field","Label","Control","iconLeft","Input","color","placeholder","value","align","className","Help","PasswordField","name","error","LoginBottom","onLogin","useState","setPassword","setError","handleSubmit","secureKey","ecdsaPubkeyToAddress","secureAddr","resolve","resolveResp","includes","evt","target","onClick","RegisterBottom","passwordConfirm","setPasswordConfirm","insecureKey","secureKeyAddress","community","newEmptyTree","playTransactions","setOwnershipTransaction","setDataTransaction","doRegister","LoginForm","props","useReducer","redirect","doRedirect","useContext","StoreContext","globalDispatch","AppActions","login","location","pathname","to","Column","size","style","width","height","tokenPath","TokenWallet","firstRun","tokens","setState","globalState","useEffect","loadTokens","tokenResp","ObjectCreator","title","subtitle","content","setLoading","ephemeralP","generate","communityP","Promise","all","ephemeralKey","treeP","addrP","userAddr","id","nftP","userP","Date","now","changeHandler","marginTop","createNFT","tabs","NFTCard","onSend","attrs","sending","destination","loadNFT","resolveData","attrsResp","Header","Title","Content","Item","Footer","padding","kind","text","ObjectWallet","dids","addDid","addLoading","getObjects","tResp","destinationKey","destionationDid","destTip","destTree","authResp","withoutSent","cards","Object","keys","map","nftTip","nftTree","doAsync","Wallet","currentTab","objects","clickHandler","tabStr","innerText","toLowerCase","userDid","Tab","active","creator","tab","pageContent","Routing","path","App","transparent","Brand","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","subDirectory","Go","setWasmPath","stopLoading","setDID","createContext","StoreProvider","children","setFirstRun","sessionStorage","getItem","userKey","tipP","keyP","fromBytes","doAsyncSet","privateKey","setItem","toString","newState","Provider","webpackEmptyContext","req","e","code","module","exports","_appPromise","debug","reject","process","Community","getDefault","freshLocalTestCommunity"],"mappings":"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","file":"static/js/main.ceca64b4.chunk.js","sourcesContent":["import React, { useReducer, useState, useContext } from 'react';\nimport { Columns, Heading, Form, Icon, Loader, Button } from 'react-bulma-components';\nimport { getAppCommunity } from '../util/appcommunity';\nimport { EcdsaKey, ChainTree, Tupelo, setOwnershipTransaction, setDataTransaction } from 'tupelo-wasm-sdk';\nimport { RouteProps, Redirect } from 'react-router';\nimport {StoreContext, AppActions, IAppLogin} from '../state/store'\n\n\nexport const usernameKey = \"/_wallet/username\"\nconst namespace = Buffer.from(\"_wallet-dev\")\n\n/**\n * Generates a public/private keypair from an *insecure* passphrase.\n * This method is used to generate a ChainTree with a known name (given a namespace)\n * The very first thing you do with the ChainTree should be to ChangeOwner\n * @param userName - the username\n */\nexport const publicUserKey = async (userName: string) => {\n    return EcdsaKey.passPhraseKey(Buffer.from(userName), namespace)\n}\n\ninterface ILoginState {\n    loading: boolean\n    username: string\n    password: string\n    userTree?: ChainTree\n}\n\nenum Actions {\n    loginFormType,\n    passwordFormType,\n    userTree,\n    registering,\n    loggingIn,\n}\n\ninterface ILoginActions {\n    type: Actions\n}\n\ninterface IUsernameType extends ILoginActions {\n    type: Actions.loginFormType\n    username: string\n    dispatch: Function\n}\n\ninterface IPasswordType extends ILoginActions {\n    type: Actions.passwordFormType\n    password: string\n}\n\ninterface IUserTree extends ILoginActions {\n    type: Actions.userTree\n    username: string\n    tree?: ChainTree\n    dispatch: Function\n}\n\nconst initialState = {\n    loading: false,\n    username: '',\n    password: '',\n}\n\n\nlet usernameTimeout: number | undefined;\n\n// debounced username checker\nconst checkUsername = (state: ILoginState, dispatch: Function) => {\n\n    const later = async () => {\n        const c = await getAppCommunity()\n\n        const username = state.username\n        if (!username) {\n            return //nothing to do on an empty username\n        }\n        console.log(\"actually checking: \", username)\n        const key = await publicUserKey(username)\n        // Convert the key to a tupelo DID (ChainTree id)\n        const did = await Tupelo.ecdsaPubkeyToDid(key.publicKey)\n\n        let tip\n        let tree: ChainTree | undefined = undefined\n        try {\n            tip = await c.getTip(did)\n        } catch (e) {\n            if (e === \"not found\") {\n                // do nothing, let tip be null\n            }\n        }\n        if (tip !== undefined) {\n            tree = new ChainTree({\n                store: c.blockservice,\n                tip: tip,\n            })\n        }\n\n        dispatch({\n            type: Actions.userTree,\n            username: username,\n            tree: tree,\n            dispatch: dispatch,\n        } as IUserTree)\n\n        usernameTimeout = undefined;\n    };\n\n    clearTimeout(usernameTimeout);\n    usernameTimeout = setTimeout(later, 150) as any; // nodejs and browser have differing types for the timeout return\n}\n\nfunction reducer(state: ILoginState, action: ILoginActions) {\n    switch (action.type) {\n        case Actions.loginFormType:\n            const username = (action as IUsernameType).username\n            checkUsername(state, (action as IUsernameType).dispatch)\n            return { ...state, loading: true, username: username }\n        case Actions.userTree:\n            const act = action as IUserTree\n            console.log(\"user tree received: \", act.username, \" state: \", state.username)\n            if (act.username !== state.username) {\n                // this means we missed one\n                checkUsername(state, act.dispatch)\n                return state // don't update anything yet\n            }\n            return { ...state, loading: false, userTree: (action as IUserTree).tree }\n        case Actions.passwordFormType:\n            return { ...state, password: (action as IPasswordType).password }\n        case Actions.registering:\n            return { ...state, loading: true }\n        case Actions.loggingIn:\n            return { ...state, loading: true }\n        default:\n            throw new Error(\"unkown type: \" + action.type)\n    }\n}\n\nconst isAvailable = (state: ILoginState) => {\n    return !state.loading && state.username && !state.userTree\n}\n\n// colors: '\"link\" | \"success\" | \"primary\" | \"info\" | \"warning\" | \"danger\" | \"light\" | \"dark\" | \"white\" | \"black\" |\n\nfunction UsernameField({ state, onChange }: { state: ILoginState, onChange: React.ChangeEventHandler }) {\n    return (\n        <Form.Field>\n            <Form.Label>Username</Form.Label>\n            <Form.Control iconLeft>\n                <Form.Input color={isAvailable(state) ? \"success\" : \"info\"} type=\"text\" placeholder=\"Username\" value={state.username} onChange={onChange} />\n                {state.loading ?\n                    <Icon align=\"left\"><span className=\"fas fa-spinner fa-pulse\" /></Icon>\n                    :\n                    <Icon align=\"left\"><span className=\"fas fa-user\" /></Icon>\n                }\n            </Form.Control>\n            {isAvailable(state) && <Form.Help color=\"success\">This username is available</Form.Help>}\n        </Form.Field>\n    )\n}\n\nfunction PasswordField({ name, value, onChange, error }: { name: string, value: string, error: string, onChange: React.ChangeEventHandler }) {\n    return (\n        <Form.Field>\n            <Form.Label>{name}</Form.Label>\n            <Form.Control iconLeft>\n                <Form.Input className={error ? \"animated pulse faster\" : \"\"} color={error ? \"danger\" : \"info\"} type=\"password\" placeholder=\"Password\" value={value} onChange={onChange} />\n                <Icon align=\"left\"><span className=\"fas fa-key\" /></Icon>\n            </Form.Control>\n            {error && <Form.Help color=\"danger\">{error}</Form.Help>}\n        </Form.Field>\n    )\n}\n\n// the elements at the bottom of a login form\nfunction LoginBottom({ state, dispatch, onLogin }: { state: ILoginState, dispatch: Function, onLogin:Function }) {\n    const [password, setPassword] = useState('')\n    const [error, setError] = useState('')\n\n    const handleSubmit = async () => {\n        if (state.userTree === undefined) {\n            throw new Error(\"must have a user tree to login\")\n        }\n\n        const tree = state.userTree\n        const username = state.username\n\n        let secureKey = await EcdsaKey.passPhraseKey(Buffer.from(password), Buffer.from(username))\n        let secureAddr = await Tupelo.ecdsaPubkeyToAddress(secureKey.publicKey)\n        let resolveResp = await tree.resolve(\"tree/_tupelo/authentications\")\n        let auths: string[] = resolveResp.value\n        if (auths.includes(secureAddr)) {\n            tree.key = secureKey\n            onLogin(state.userTree)\n        } else {\n            setError(\"invalid password\")\n        }\n    }\n\n    return (\n        <div>\n            <PasswordField error={error} name=\"Password\" value={password} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setError(''); setPassword(evt.target.value) }} />\n            <Button onClick={handleSubmit}>Login</Button>\n        </div>\n    )\n}\n\n// the elements at the bottom of a login form\nfunction RegisterBottom({ state, dispatch, onLogin }: { state: ILoginState, dispatch: Function, onLogin:Function }) {\n    const [password, setPassword] = useState('')\n    const [passwordConfirm, setPasswordConfirm] = useState('')\n    const [error, setError] = useState('')\n\n    const isConfirmed = () => {\n        return password === passwordConfirm\n    }\n\n    const handleSubmit = () => {\n        if (!isConfirmed()) {\n            setError('Passwords do not match')\n            return // do nothing here\n        }\n        dispatch({ type: Actions.registering })\n        const doRegister = async ()=> {\n            const username = state.username\n            const insecureKey = await publicUserKey(username)\n    \n            const secureKey = await EcdsaKey.passPhraseKey(Buffer.from(password), Buffer.from(username))\n            const secureKeyAddress = await Tupelo.ecdsaPubkeyToAddress(secureKey.publicKey)\n    \n            const community = await getAppCommunity()\n            const tree = await ChainTree.newEmptyTree(community.blockservice, insecureKey)\n    \n            await community.playTransactions(tree, [\n                // Set the ownership of the chaintree to our secure key (thus owning the username)\n                setOwnershipTransaction([secureKeyAddress]),\n                // Cache the username inside of the chaintree for easier access later\n                setDataTransaction(usernameKey, username),\n            ])\n            tree.key = secureKey\n            onLogin(tree)\n        }\n        doRegister()\n    }\n\n    return (\n        <div>\n            <PasswordField error={error} name=\"Password\" value={password} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setError(''); setPassword(evt.target.value) }} />\n            <PasswordField error={error} name=\"Confirm Password\" value={passwordConfirm} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setError(''); setPasswordConfirm(evt.target.value) }} />\n            <Button onClick={handleSubmit}>Register</Button>\n        </div>\n    )\n}\n\nexport function LoginForm(props:RouteProps) {\n    const [state, dispatch] = useReducer(reducer, initialState)\n    const [redirect,doRedirect] = useState(false)\n\n    const [_, globalDispatch] = useContext(StoreContext)\n\n    const handleUsernameChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch({ type: Actions.loginFormType, username: evt.target.value, dispatch: dispatch } as IUsernameType)\n    }\n\n    const onLogin = (tree:ChainTree) => {\n        globalDispatch({\n            type: AppActions.login,\n            userTree: tree,\n        } as IAppLogin)\n        doRedirect(true)\n    }\n\n    let { from } = (props.location && props.location.state) ? props.location.state : { from: { pathname: \"/wallet\" } };\n\n    if (redirect) {\n        return (\n            <Redirect to={from}/>\n        )\n    }\n\n    return (\n        <div>\n            <Columns className=\"is-desktop is-centered\">\n                <Columns.Column size={\"half\"} className=\"is-centered\">\n                    <Heading className=\"animated flipInX fast\">Hello.</Heading>\n                    <p>Find or create your wallet.</p>\n                </Columns.Column>\n            </Columns>\n\n            <Columns className=\"is-desktop is-centered\">\n                <Columns.Column size={\"half\"}>\n                    <UsernameField state={state} onChange={handleUsernameChange} />\n                    {state.loading && state.username && <Loader style={{ width: 25, height: 25 }} />}\n                    {!state.loading && state.username && state.userTree && <LoginBottom state={state} dispatch={dispatch} onLogin={onLogin}/>}\n                    {!state.loading && state.username && !state.userTree && <RegisterBottom state={state} dispatch={dispatch} onLogin={onLogin} />}\n                </Columns.Column>\n            </Columns>\n        </div>\n    )\n}\n","import React, { useContext, useState, useEffect } from 'react'\nimport { StoreContext } from '../state/store'\nimport { Redirect, RouteProps } from 'react-router'\nimport { Section, Table, Loader, Heading } from 'react-bulma-components'\n\nconst tokenPath = \"/tree/_tupelo/tokens\";\n\n\nexport function TokenWallet(props: RouteProps) {\n\n    const [state, setState] = useState({\n        loading: true,\n        firstRun: true,\n        tokens: {},\n    })\n\n    const [globalState] = useContext(StoreContext)\n\n    useEffect(() => {\n        if (state.firstRun && globalState.userTree) {\n            setState({ ...state, firstRun: false })\n            loadTokens()\n        }\n    }, [globalState.userTree])\n\n    if (!globalState.userTree) {\n        return (\n            <Redirect to={{\n                pathname: \"/login\",\n                state: { from: props.location },\n            }} />\n        )\n    }\n\n    const loadTokens = async () => {\n        if (globalState.userTree === undefined) {\n            throw new Error(\"user tree must be defined\")\n        }\n        let tokenResp: any\n        try {\n            tokenResp = await globalState.userTree.resolve(tokenPath)\n        } catch (e) {\n            console.log(\"e: \", e)\n            setState({ ...state, tokens: {}, loading: false })\n        }\n\n        console.log(\"tokens resp: \", tokenResp)\n        setState({ ...state, tokens: tokenResp.value, loading: false })\n    }\n\n\n\n    return (\n        <div>\n            {state.loading ?\n                <Loader />\n                :\n                <Table>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Balance</th>\n                            <th>Max</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n\n                    </tbody>\n                </Table>\n            }\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport { Heading, Form, Box,Button, Loader } from 'react-bulma-components';\nimport { Tupelo,ChainTree, EcdsaKey, setDataTransaction, setOwnershipTransaction } from 'tupelo-wasm-sdk';\nimport { getAppCommunity } from '../util/appcommunity';\n\nexport interface INFTProperties {\n    title: string\n    subtitle: string\n    content: string\n}\n\nexport function ObjectCreator({userTree}:{userTree:ChainTree}) {\n    const [state, setState] = useState({\n        title: \"\",\n        subtitle: \"\",\n        content: \"\",\n    } as { [index: string]: string })\n\n    const [loading,setLoading] = useState(false)\n\n    async function createNFT() {\n        const props = state\n        if (userTree.key === undefined) {\n            throw new Error(\"undefined userTree key\")\n        }\n        // first we create an ephemeral key\n        const ephemeralP = EcdsaKey.generate()\n        const communityP = getAppCommunity()\n    \n        const [ephemeralKey,c] = await Promise.all([ephemeralP,communityP])\n        // then a new chaintree\n        const treeP = ChainTree.newEmptyTree(c.blockservice, ephemeralKey)\n        const addrP = Tupelo.ecdsaPubkeyToAddress(userTree.key.publicKey)\n        const [tree,userAddr] = await Promise.all([treeP, addrP])\n        const did = await tree.id()\n        if (did === null) {\n            throw new Error(\"unknown tree DID\")\n        }\n        // now we set the data and CHOWN to the user\n        const nftP = c.playTransactions(tree, [\n            setDataTransaction(\"/_wallet/attributes\", {\n                title: props.title,\n                subtitle: props.subtitle,\n                content: props.content\n            }),\n            setOwnershipTransaction([userAddr]),\n        ])\n        // and we keep a record of the NFT in the user tree\n        const userP = c.playTransactions(userTree, [\n            setDataTransaction(\"/_wallet/nfts/\" + did, Date.now())\n        ])\n        await Promise.all([nftP, userP])\n        setState({})\n        setLoading(false)\n    }\n\n    const changeHandler = (evt: React.ChangeEvent<HTMLInputElement>) => {\n        const target = evt.target\n        setState({...state,\n            [target.name]: target.value,\n        })\n    }\n\n    const submitHandler = ()=> {\n        setLoading(true)\n        createNFT()\n    }\n\n    return (\n        <div>\n            <Heading>Object Creator</Heading>\n            <p>This lets you create an NFT!</p>\n            {loading ?\n            <Loader/> \n        :\n            <Box style={{ marginTop: '1em' }}>\n                <Form.Field>\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control>\n                        <Form.Input value={state.title} onChange={changeHandler} name=\"title\" placeholder=\"title\" />\n                    </Form.Control>\n                </Form.Field>\n                <Form.Field>\n                    <Form.Label>Subtitle</Form.Label>\n                    <Form.Control>\n                        <Form.Input value={state.subtitle} onChange={changeHandler} name=\"subtitle\" placeholder=\"subtitle\" />\n                    </Form.Control>\n                </Form.Field>\n                <Form.Field>\n                    <Form.Label>Content</Form.Label>\n                    <Form.Control>\n                        <Form.Input value={state.content} onChange={changeHandler} name=\"content\" placeholder=\"content\" />\n                    </Form.Control>\n                </Form.Field>\n                <Button onClick={submitHandler}>Create</Button>\n            </Box>}\n        </div>\n    )\n}","import React, { useContext, useEffect, useState } from 'react';\nimport { StoreContext } from '../state/store';\nimport { Redirect, RouteProps } from 'react-router';\nimport { Tabs, Container, Heading } from 'react-bulma-components';\nimport { TokenWallet } from '../components/tokenwallet';\nimport { ObjectCreator } from '../components/creator';\nimport { ObjectWallet } from '../components/objectwallet';\n\nenum tabs {\n    objects,\n    tokens,\n    creator,\n}\ntype tabStrings = keyof typeof tabs;\n\nexport function Wallet(props: RouteProps) {\n\n    const [state, setState] = useState({\n        currentTab: tabs.objects,\n    })\n    const [globalState] = useContext(StoreContext)\n\n    const clickHandler = (evt: any) => {\n        const tabStr: tabStrings = evt.target.innerText.toLowerCase()\n        setState({ ...state, currentTab: tabs[tabStr] })\n    }\n\n    const pageContent = (tab: tabs) => {\n        if (globalState.userTree === undefined) {\n            throw new Error(\"can't get page content without a usertree\")\n        }\n        switch (tab) {\n            case tabs.tokens:\n                return <TokenWallet />\n            case tabs.creator:\n                return <ObjectCreator userTree={globalState.userTree} />\n            case tabs.objects:\n                return <ObjectWallet />\n            default:\n                throw new Error(\"unrecognized tab: \" + tab)\n        }\n    }\n\n    if (!globalState.userTree) {\n        return (\n            <Redirect to={{\n                pathname: \"/login\",\n                state: { from: props.location },\n            }} />\n        )\n    }\n\n    return (\n        <Container>\n            <Heading>Wallet</Heading>\n            <h1>did: {globalState.userDid}</h1>\n            <Tabs>\n                <Tabs.Tab onClick={clickHandler} active={state.currentTab === tabs.objects}>Objects</Tabs.Tab>\n                <Tabs.Tab onClick={clickHandler} active={state.currentTab === tabs.tokens}>Tokens</Tabs.Tab>\n                <Tabs.Tab onClick={clickHandler} active={state.currentTab === tabs.creator}>Creator</Tabs.Tab>\n            </Tabs>\n            {pageContent(state.currentTab)}\n        </Container>\n    )\n}","import React, { useContext, useState, useEffect } from 'react';\nimport { Box, Button, Form, Media, Card, Heading, Content, Loader, Columns } from 'react-bulma-components';\nimport { StoreContext } from '../state/store';\nimport { ChainTree, Tupelo, setOwnershipTransaction, setDataTransaction } from 'tupelo-wasm-sdk';\nimport { getAppCommunity } from '../util/appcommunity';\nimport { INFTProperties } from './creator';\nimport { publicUserKey } from '../pages/login';\n\ninterface IOnSendEvent {\n    did: string\n    tree: ChainTree\n    destination: string\n}\n\n\nfunction NFTCard({ did, onSend }: { did: string, onSend: Function }) {\n    const [state, setState] = useState({\n        loading: true,\n        tree: undefined as ChainTree | undefined,\n        attrs: {} as INFTProperties,\n        sending: false,\n        destination: \"\",\n    })\n\n    const loadNFT = async () => {\n        const c = await getAppCommunity()\n        const tip = await c.getTip(did)\n        const tree = new ChainTree({\n            store: c.blockservice,\n            tip: tip,\n        })\n        const attrsResp = await tree.resolveData(\"/_wallet/attributes\")\n        setState({ ...state, loading: false, tree: tree, attrs: (attrsResp.value || {}) })\n    }\n\n    useEffect(() => {\n        loadNFT()\n    }, [did])\n\n    const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n        setState({ ...state, destination: evt.target.value })\n    }\n\n    const handleSend = () => {\n        setState({ ...state, loading: true, sending: false })\n        onSend({\n            did: did,\n            tree: state.tree,\n            destination: state.destination,\n        } as IOnSendEvent)\n    }\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Header.Title>{did}</Card.Header.Title>\n            </Card.Header>\n            <Card.Content>\n                {state.loading ?\n                    <Loader />\n                    :\n                    <div>\n                        <Media>\n                            <Media.Item>\n                                <Heading size={4}>\n                                    {state.attrs.title}\n                                </Heading>\n                                <Heading subtitle size={6}>\n                                    {state.attrs.subtitle}\n                                </Heading>\n                            </Media.Item>\n                        </Media>\n                        <Content>\n                            {state.attrs.content}\n                        </Content>\n                    </div>}\n            </Card.Content>\n            <Card.Footer>\n                {!state.sending ?\n                    <Card.Footer.Item onClick={() => { setState({ ...state, sending: true }) }}>\n                        Send\n                    </Card.Footer.Item>\n                    :\n                    <Content style={{ padding: '1em' }}>\n                        <Form.Field>\n                            <Form.Label>Destination Name</Form.Label>\n                            <Form.Control>\n                                <Form.Input value={state.destination} onChange={handleChange} name=\"nftdestination\" placeholder=\"Destination\" />\n                            </Form.Control>\n                        </Form.Field>\n                        <Form.Field kind=\"group\">\n                            <Button color=\"primary\" onClick={handleSend}>Send</Button>\n                            <Button text onClick={() => { setState({ ...state, sending: false, destination: \"\" }) }}>cancel</Button>\n                        </Form.Field>\n                    </Content>\n                }\n            </Card.Footer>\n        </Card>\n    )\n}\n\nexport function ObjectWallet() {\n    const [globalState] = useContext(StoreContext)\n    const [state, setState] = useState({\n        dids: {} as { [index: string]: number },\n        addDid: \"\",\n        addLoading: false,\n    })\n\n    const getObjects = async () => {\n        if (globalState.userTree === undefined) {\n            throw new Error(\"user tree has to be defined\")\n        }\n        const tResp = await globalState.userTree.resolveData(\"/_wallet/nfts\")\n        setState({ ...state, dids: (tResp.value || {}) })\n    }\n\n    const onSend = async (evt: IOnSendEvent) => {\n        const userTree = globalState.userTree\n        if (userTree === undefined || userTree.key === undefined) {\n            throw new Error(\"can only send when a valid user\")\n        }\n        const c = await getAppCommunity()\n\n        const destinationKey = await publicUserKey(evt.destination)\n        const destionationDid = await Tupelo.ecdsaPubkeyToDid(destinationKey.publicKey)\n\n        const destTip = await c.getTip(destionationDid)\n        const destTree = new ChainTree({\n            store: c.blockservice,\n            tip: destTip\n        })\n        const authResp = await destTree.resolve(\"tree/_tupelo/authentications\")\n\n        evt.tree.key = userTree.key\n        console.log(\"reassigning \", evt.did, \" to: \", destionationDid)\n        // set the auth of this NFT to the same as the receiver\n        await c.playTransactions(evt.tree, [\n            setOwnershipTransaction(authResp.value)\n        ])\n\n        console.log('remove did from nfts')\n        // remove this NFT from my bag of hodling\n        const { [evt.did]: value, ...withoutSent } = state.dids\n        await c.playTransactions(userTree, [\n            setDataTransaction(\"/_wallet/nfts\", withoutSent)\n        ])\n        setState({ ...state, dids: withoutSent })\n    }\n\n    useEffect(() => {\n        if (globalState.userTree) {\n            getObjects()\n        }\n    }, [globalState.userTree])\n\n    const cards = Object.keys(state.dids).map((did) => {\n        return (\n            <Columns.Column key={did} size=\"half\">\n                <NFTCard onSend={onSend} did={did} />\n            </Columns.Column>\n        )\n    })\n\n    const handleAdd = ()=> {\n        setState({...state, addLoading: true})\n        const did = state.addDid\n        const doAsync = async ()=> {\n            const userTree = globalState.userTree\n\n            if (userTree === undefined || userTree.key === undefined) {\n                throw new Error(\"user tree undfined\")\n            }\n\n            const c = await getAppCommunity()\n            const nftTip = await c.getTip(did)\n            const nftTree = new ChainTree({\n                store: c.blockservice,\n                tip: nftTip,\n            })\n            let userAddr = await Tupelo.ecdsaPubkeyToAddress(userTree.key.publicKey)\n            let resolveResp = await nftTree.resolve(\"tree/_tupelo/authentications\")\n            let auths: string[] = resolveResp.value\n            if (auths.includes(userAddr)) {\n                // this tree does belong to the user\n                await c.playTransactions(userTree, [\n                    setDataTransaction(\"/_wallet/nfts/\" + did, Date.now())\n                ])\n                setState({...state, dids: {...state.dids, [did]: Date.now()}, addLoading: false, addDid: \"\"})\n            } else {\n                setState({...state, addLoading: false, addDid: \"\"})\n            }\n        }\n        doAsync()\n    }\n\n    return (\n        <div>\n            <Heading>Object wallet</Heading>\n            <Columns>\n                {cards}\n            </Columns>\n            <Box>\n                {state.addLoading ?\n                <Loader/>\n                :\n                <div>\n                <Form.Field>\n                    <Form.Label>Add</Form.Label>\n                    <Form.Control>\n                        <Form.Input value={state.addDid} onChange={(evt)=> {setState({...state, addDid: evt.target.value})}} name=\"additionalDid\" placeholder=\"DID\" />\n                    </Form.Control>\n                </Form.Field>\n                <Form.Field kind=\"group\">\n                    <Button onClick={handleAdd} color=\"primary\">Add</Button>\n                </Form.Field>\n                </div>\n                }\n            </Box>\n        </div>\n    )\n}","import React, { useContext } from 'react';\nimport './App.css';\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\nimport { Navbar, Container,Loader, Columns, Section } from 'react-bulma-components'\nimport { LoginForm } from './pages/login';\nimport { StoreProvider, StoreContext } from './state/store';\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Wallet } from './pages/wallet';\n\nconst Routing = () => {\n  const [globalState, globalDispatch] = useContext(StoreContext)\n\n\n  return (\n    globalState.loading > 0 ?\n    <Section>\n    <Columns className=\"is-desktop is-centered is-vcentered\"> \n       <Loader style={{height:100,width:100}}/>\n    </Columns>\n    </Section>\n      :\n    <Router>\n      <Switch>\n        <Route path=\"/login\">\n          <LoginForm />\n        </Route>\n        <Route path=\"/wallet\">\n          <Wallet />\n        </Route>\n        <Route>\n          <LoginForm />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\n\nconst App: React.FC = () => {\n\n  return (\n    <StoreProvider >\n      <Container>\n        <Navbar transparent={false}>\n          <Navbar.Brand>\n            Tupelo\n        </Navbar.Brand>\n        </Navbar>\n      </Container>\n      <Routing />\n\n    </StoreProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { createContext, useReducer, useEffect, useState } from \"react\";\nimport { ChainTree, EcdsaKey } from \"tupelo-wasm-sdk\";\nimport { getAppCommunity } from \"../util/appcommunity\";\n\ndeclare const Go: any;\n\nif (window) {\n  const subDirectory = window.location.pathname\n  console.log(\"subDirectory \", subDirectory)\n  \n  if (subDirectory !== '/') {\n      console.log(\"setting wasmpath to: \",  subDirectory + \"tupelo.wasm\")\n      Go.setWasmPath(subDirectory + \"tupelo.wasm\");\n  }\n}\n\ninterface IAppState {\n  userTree?: ChainTree\n  username?: string\n  userDid?: string\n  loading: number\n}\n\nexport enum AppActions {\n  loading,\n  stopLoading,\n  login,\n  setDID,\n}\n\nexport interface IAppAction {\n  type: AppActions\n}\n\nexport interface IAppLoading extends IAppAction {\n  type: AppActions.loading\n}\n\nexport interface IAppStopLoading extends IAppAction {\n  type: AppActions.stopLoading\n}\n\nexport interface IAppLogin extends IAppAction {\n  type: AppActions.login\n  userTree: ChainTree\n}\n\ninterface IAppSetDid extends IAppAction {\n  type: AppActions.setDID\n  did: string\n}\n\nfunction reducer(state: IAppState, action: IAppAction) {\n  switch (action.type) {\n    case AppActions.loading:\n      return { ...state, loading: state.loading + 1 }\n    case AppActions.stopLoading:\n      return { ...state, loading: state.loading - 1 }\n    case AppActions.login:\n      const act = action as IAppLogin\n      return { ...state, userTree: act.userTree }\n    case AppActions.setDID:\n      return { ...state, userDid: (action as IAppSetDid).did }\n    default:\n      throw new Error(\"unkown type: \" + action.type)\n  }\n}\n\nconst initialState = { loading: 1 } as IAppState\n\nconst StoreContext = createContext([initialState, () => { }] as [IAppState, React.Dispatch<IAppAction>]);\n\nconst StoreProvider = ({ children }: { children: JSX.Element[] }) => {\n  const [firstRun, setFirstRun] = useState(true);\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // On every state set\n  useEffect(\n    () => {\n      if (firstRun) {\n        setFirstRun(false)\n\n        const did = sessionStorage.getItem('userDid')\n        const userKey = sessionStorage.getItem('userKey')\n        const doAsyncSet = async ()=> {\n          if (!did || !userKey) {\n            throw new Error(\"no did or no userKey\")\n          }\n          const c = await getAppCommunity()\n          const tipP = c.getTip(did)\n          const keyP = EcdsaKey.fromBytes(Buffer.from(userKey, 'base64'))\n          const [tip, key] = await Promise.all([tipP, keyP])\n\n          const tree = new ChainTree({\n            key: key,\n            tip: tip,\n            store: c.blockservice,\n          })\n          console.log('logging in from storage')\n          dispatch({\n            type: AppActions.login,\n            userTree: tree,\n          } as IAppLogin)\n          dispatch({\n            type: AppActions.stopLoading,\n          } as IAppStopLoading)\n        }\n\n        if (did && userKey) {\n          doAsyncSet()\n        } else {\n          console.log('stopping loading')\n          dispatch({\n            type: AppActions.stopLoading\n          } as IAppStopLoading)\n        }\n      }\n\n      if (!state.userDid && state.userTree) {\n        // if we didn't yet assign the DID, do that\n        state.userTree.id().then((did) => {\n          dispatch({\n            type: AppActions.setDID,\n            did: did,\n          } as IAppSetDid)\n        })\n      }\n      if (state.userTree && state.userDid && state.userTree.key && state.userTree.key.privateKey) {\n        sessionStorage.setItem('userDid', state.userDid)\n        sessionStorage.setItem('userKey', Buffer.from(state.userTree.key.privateKey).toString('base64'))\n      }\n\n      console.log({ newState: state });\n    },\n    [state]\n  );\n\n  // Render state, dispatch and special case actions\n  return (\n    <StoreContext.Provider value={[state, dispatch]}>\n      {children}\n    </StoreContext.Provider>\n  );\n};\n\nexport { StoreContext, StoreProvider };\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 532;","\nimport { Community } from 'tupelo-wasm-sdk';\nimport debug from 'debug';\n\nconst log = debug(\"appcommunity\")\n\nlet _appPromise: Promise<Community>\n\nexport function getAppCommunity(): Promise<Community> {\n    log(\"getAppCommunity\")\n    if (_appPromise !== undefined) {\n        return _appPromise\n    }\n    _appPromise = new Promise(async (resolve, reject) => {\n        let c: Community\n        switch (process.env.NODE_ENV) {\n            case 'production':\n                log('using production community')\n                c = await Community.getDefault()\n                break;\n            default:\n                log('using development community')\n                c = await Community.freshLocalTestCommunity()\n        }\n        resolve(c)\n    })\n    return _appPromise\n}\n"],"sourceRoot":""}