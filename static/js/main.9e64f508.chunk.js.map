{"version":3,"sources":["components/establishtoken.tsx","components/sendtoken.tsx","components/minttoken.tsx","util/syncher.ts","components/receivetoken.tsx","components/tokenwallet.tsx","components/creator.tsx","components/objectwallet.tsx","pages/wallet.tsx","components/messagelist.tsx","App.tsx","serviceWorker.ts","index.tsx","util/appcommunity.ts","pages/login.tsx","state/store.tsx","../node_modules/tupelo-wasm-sdk/lib/js/go sync","util/usernames.ts"],"names":["EstablishTokenDialog","show","onClose","userTree","useState","loading","tokenName","maximum","state","setState","handleChange","evt","target","name","value","Card","style","backgroundColor","Head","Title","Body","Item","Field","Label","Control","Input","onChange","placeholder","type","toString","Help","kind","color","onClick","a","getAppCommunity","c","playTransactions","establishTokenTransaction","doAsync","text","tokenPath","SendTokenDialog","tokens","useContext","StoreContext","globalDispatch","initialState","destination","amount","destinationError","amountError","isDestinationErrored","isAmountErrored","tokenOptions","Object","keys","map","key","Select","console","log","resolve","balanceResp","balance","parseInt","s","getUserTree","destTree","EcdsaKey","generate","ephemeralKey","ChainTree","newEmptyTree","blockservice","ephemeralTree","id","userDid","destDid","ephemeralDid","Error","userAuthResp","destAuthResp","sendId","Math","random","sendTx","sendTokenTransaction","toObject","sendTokenAndGetPayload","payload","receiveTx","receiveTokenTransactionFromPayload","setOwnershipTransaction","concat","AppActions","message","title","body","MintTokenDialog","mintTokenTransaction","debug","SimpleSyncher","queue","started","this","undefined","queuedFn","pop","fn","resp","res","rej","length","run","Promise","reject","push","ReceiveTokenDialog","did","getTip","tip","tree","store","tokensResp","all","tResp","syncher","token","send","sendPayloads","rxTransactions","TokenWallet","props","showEstablishModal","showMintModal","showSendModal","showReceiveModal","modifiedAt","globalState","useEffect","loadTokens","tokenResp","error","to","pathname","from","location","tokenRows","handleCloseModal","Date","now","Side","align","TokenRow","max","loadInfo","tokenInfoPath","tokenInfoResp","monetaryPolicy","ObjectCreator","subtitle","content","setLoading","ephemeralP","communityP","treeP","addrP","Tupelo","ecdsaPubkeyToAddress","publicKey","userAddr","nftP","setDataTransaction","userP","changeHandler","marginTop","createNFT","NFTCard","onSend","attrs","sending","isDestErrored","resolveData","attrsResp","loadNFT","Header","Content","size","Footer","padding","authResp","dids","didsWithoutSent","ObjectWallet","getObjects","cards","Column","onAdd","tabs","AddObjectForm","addOpen","addDid","addLoading","handleAdd","nftTip","nftTree","resolveResp","includes","Wallet","currentTab","objects","clickHandler","tabStr","innerText","toLowerCase","username","Tab","active","creator","tab","pageContent","UserMessageList","lis","messages","msg","listStyleType","MessageElement","remove","removeMessage","whiteSpace","Routing","className","height","width","path","App","transparent","Brand","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","_appPromise","process","Community","getDefault","freshLocalTestCommunity","Actions","usernameTimeout","password","loadingText","checkUsername","dispatch","later","publicUserKey","ecdsaPubkeyToDid","clearTimeout","setTimeout","reducer","action","loginFormType","loginText","act","passwordFormType","registering","loggingIn","isAvailable","UsernameField","iconLeft","PasswordField","LoginBottom","onLogin","setPassword","setError","handleSubmit","passPhraseKey","Buffer","secureKey","secureAddr","RegisterBottom","passwordConfirm","setPasswordConfirm","insecureKey","secureKeyAddress","community","usernameKey","doRegister","LoginForm","useReducer","redirect","doRedirect","login","subDirectory","Go","setWasmPath","stopLoading","setDID","setUsername","logout","sessionStorage","removeItem","index","i","slice","createContext","StoreProvider","children","firstRun","setFirstRun","getItem","userKey","fromBytes","doAsyncSet","privateKey","setItem","newState","Provider","webpackEmptyContext","req","e","code","module","exports","namespace","userName","didFromUserName","userTip"],"mappings":"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","file":"static/js/main.9e64f508.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nimport { Modal, Form, Button, Media,Content, Loader } from 'react-bulma-components'\nimport { ChainTree, establishTokenTransaction } from 'tupelo-wasm-sdk'\nimport { getAppCommunity } from '../util/appcommunity'\n\nexport function EstablishTokenDialog({ show, onClose, userTree }: { userTree: ChainTree, show: boolean, onClose: (() => void) }) {\n    const [state, setState] = useState({\n        loading: false,\n        tokenName: '',\n        maximum: 0,\n    })\n\n    const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n        setState({ ...state, [evt.target.name]: evt.target.value })\n    }\n\n    const handleSubmit = () => {\n        setState({...state, loading: true})\n        const doAsync = async ()=> {\n            const c = await getAppCommunity()\n            await c.playTransactions(userTree, [establishTokenTransaction(state.tokenName, state.maximum)])\n            setState({...state, loading: false, tokenName: '', maximum: 0})\n            onClose()\n        }\n        doAsync()\n    }\n\n    return (\n    <Modal show={show} onClose={onClose}>\n        <Modal.Card style={{backgroundColor: 'white'}}>\n        <Modal.Card.Head>\n            <Modal.Card.Title>\n                Establish Token\n            </Modal.Card.Title>\n        </Modal.Card.Head>\n        <Modal.Card.Body>\n            <Media>\n                {state.loading ?\n                <Loader />\n                :                \n                <Media.Item>\n                    <Content>\n                        <Form.Field>\n                            <Form.Label>Token Name</Form.Label>\n                            <Form.Control>\n                                <Form.Input value={state.tokenName} onChange={handleChange} name=\"tokenName\" placeholder=\"Token Name\" />\n                            </Form.Control>\n                        </Form.Field>\n                        <Form.Field>\n                            <Form.Label>Maximum Mint</Form.Label>\n                            <Form.Control>\n                                <Form.Input type=\"number\" value={state.maximum.toString()} onChange={handleChange} name=\"maximum\" placeholder=\"Maximum Mint\" />\n                            </Form.Control>\n                            <Form.Help>Leave as 0 to allow unlimited minting</Form.Help>\n                        </Form.Field>\n                        <Form.Field kind=\"group\">\n                            <Button color=\"primary\" onClick={handleSubmit}>Establish</Button>\n                            <Button text onClick={() => { onClose() }}>cancel</Button>\n                        </Form.Field>\n                    </Content>\n                </Media.Item>\n                }\n            </Media>\n        </Modal.Card.Body>\n        </Modal.Card>\n    </Modal>\n)\n}\n\n","import React, { useState, useContext } from 'react'\n\nimport { Modal, Form, Button, Media,Content, Loader } from 'react-bulma-components'\nimport { ChainTree, receiveTokenTransactionFromPayload, EcdsaKey, sendTokenTransaction, setOwnershipTransaction } from 'tupelo-wasm-sdk'\nimport { getAppCommunity } from '../util/appcommunity'\nimport { getUserTree } from '../util/usernames'\nimport { StoreContext, IAppMessage, AppActions } from '../state/store'\n\nconst tokenPath = \"/tree/_tupelo/tokens\";\n\n//TODO(bug): if you let the browser autofill a field it doesn't trigger change and so it doesn't update the state\n// so you end up with null names\n\nexport function SendTokenDialog({ show, onClose, userTree, tokens }: { tokens: Object, userTree: ChainTree, show: boolean, onClose: (() => void) }) {\n    const [,globalDispatch] = useContext(StoreContext)\n    \n    const initialState = {\n        loading: false,\n        tokenName: '',\n        destination: '',\n        amount: '',\n        destinationError: '',\n        amountError: '',\n    }\n\n    const [state, setState] = useState(initialState)\n\n    const isDestinationErrored = ()=> {\n        return state.destinationError !== ''\n    }\n\n    const isAmountErrored = ()=> {\n        return state.amountError !== ''\n    }\n\n    const handleChange = (evt: React.ChangeEvent<HTMLInputElement|HTMLSelectElement>) => {\n        setState({ ...state, [evt.target.name]: evt.target.value })\n    }\n\n    const handleSubmit = () => {\n        setState({...state, loading: true, destinationError: '', amountError: ''})\n        const doAsync = async ()=> {\n            console.log(\"sending: \", state)\n            /*\n                get destination chain,\n                create a new ephemeral chaintree\n                chown owner to both self and destination\n                sendCoin from user tree\n                receiveCoin on new chaintree\n            */\n            const c = await getAppCommunity()\n\n            const balanceResp = await userTree.resolve(tokenPath + '/' + state.tokenName)\n            const balance = balanceResp.value['balance'] as number\n\n            if (parseInt(state.amount,10) > balance) {\n                setState((s)=> {\n                    return {...s, amountError: \"That's too much. You don't have that\", loading: false}   \n                })\n                return\n            }\n            \n            let destTree\n            try {\n                destTree = await getUserTree(state.destination)\n            } catch(e) {\n                if (e === 'not found') {\n                    setState((s)=> {\n                        return {...s, destinationError: 'User not found', loading: false}   \n                    })\n                    return\n                }\n                throw e\n            }\n            const ephemeralKey = await EcdsaKey.generate()\n            const ephemeralTree = await ChainTree.newEmptyTree(c.blockservice, ephemeralKey)\n\n            const userDid = await userTree.id()\n            const destDid = await destTree.id()\n            const ephemeralDid = await ephemeralTree.id()\n\n            if (userDid === null || destDid === null || ephemeralDid === null) {\n                throw new Error(\"error getting userdid, destdid or ephemeralDID\")\n            }\n\n            console.log(\"ephemeralDID: \", ephemeralDid)\n            const userAuthResp = await userTree.resolve(\"tree/_tupelo/authentications\")\n            const destAuthResp = await destTree.resolve(\"tree/_tupelo/authentications\")\n\n            const sendId = userDid + \"->\" + destDid + Math.random().toString()\n\n            console.log(\"sending token to ephemeral\")\n            const sendTx = sendTokenTransaction(\n                sendId,\n                state.tokenName,\n                parseInt(state.amount, 10),\n                ephemeralDid,\n            )\n            console.log(\"send tx: \", sendTx.toObject())\n            const payload = await c.sendTokenAndGetPayload(userTree, sendTx)\n\n            console.log(\"receiving on ephemeral, payload: \", payload.toObject())\n            let receiveTx = receiveTokenTransactionFromPayload(payload)\n\n            console.log(\"receiveTx: \", receiveTx.toObject())\n            await c.playTransactions(ephemeralTree, [\n                setOwnershipTransaction(userAuthResp.value.concat(destAuthResp.value)),\n                receiveTx,\n            ])\n            console.log('done')\n            \n            setState(initialState)\n            onClose()\n            globalDispatch({\n                type: AppActions.message,\n                message: {\n                    title: \"Sent \" + state.amount + \" token to user: \" + state.destination,\n                    body: \"Ask \" + state.destination + \" to use this DID in their receive token: \\n\" + ephemeralDid, \n                }\n            } as IAppMessage)\n        }\n        doAsync()\n    }\n\n    const tokenOptions = Object.keys(tokens).map((tokenName) => {\n        return <option key={tokenName} value={tokenName}>{tokenName}</option>\n    })\n\n    return (\n    <Modal show={show} onClose={onClose}>\n        <Modal.Card style={{backgroundColor: 'white'}}>\n        <Modal.Card.Head>\n            <Modal.Card.Title>\n                Send Token\n            </Modal.Card.Title>\n        </Modal.Card.Head>\n        <Modal.Card.Body>\n            <Media>\n                {state.loading ?\n                <Loader />\n                :                \n                <Media.Item>\n                    <Content>\n                        <Form.Field>\n                            <Form.Label>Token Name</Form.Label>\n                            <Form.Control>\n                                <Form.Select onChange={handleChange} value={state.tokenName} name=\"tokenName\">\n                                    <option value=\"\"></option>\n                                    {tokenOptions}\n                                </Form.Select>\n                            </Form.Control>\n                        </Form.Field>\n                        <Form.Field>\n                            <Form.Label>Destination</Form.Label>\n                            <Form.Control>\n                                <Form.Input color={ isDestinationErrored() ? \"danger\" : \"info\" } value={state.destination} onChange={handleChange} name=\"destination\" placeholder=\"Where to send\" />\n                            </Form.Control>\n                            {isDestinationErrored() && <Form.Help color=\"danger\">{state.destinationError}</Form.Help>}\n\n                        </Form.Field>\n                        <Form.Field>\n                            <Form.Label>Amount</Form.Label>\n                            <Form.Control>\n                                <Form.Input color={ isAmountErrored() ? \"danger\" : \"info\" } type=\"number\" value={state.amount} onChange={handleChange} name=\"amount\" placeholder=\"Amount to send\" />\n                            </Form.Control>\n                            {isAmountErrored() && <Form.Help color=\"danger\">{state.amountError}</Form.Help>}\n                        </Form.Field>\n                        <Form.Field kind=\"group\">\n                            <Button color=\"primary\" onClick={handleSubmit}>Send</Button>\n                            <Button text onClick={() => { onClose() }}>cancel</Button>\n                        </Form.Field>\n                    </Content>\n                </Media.Item>\n                }\n            </Media>\n        </Modal.Card.Body>\n        </Modal.Card>\n    </Modal>\n)\n}\n\n","import React, { useState } from 'react'\n\nimport { Modal, Form, Button, Media,Content, Loader } from 'react-bulma-components'\nimport { ChainTree, mintTokenTransaction } from 'tupelo-wasm-sdk'\nimport { getAppCommunity } from '../util/appcommunity'\n\n//TODO: this would be nice with error handling to show you you're trying to mint more than the allowed\n\nexport function MintTokenDialog({ show, onClose, userTree, tokens }: { tokens: Object, userTree: ChainTree, show: boolean, onClose: (() => void) }) {\n    const [state, setState] = useState({\n        loading: false,\n        tokenName: '',\n        amount: 0,\n    })\n\n    const handleChange = (evt: React.ChangeEvent<HTMLInputElement|HTMLSelectElement>) => {\n        setState({ ...state, [evt.target.name]: evt.target.value })\n    }\n\n    const handleSubmit = () => {\n        setState({...state, loading: true})\n        const doAsync = async ()=> {\n            const c = await getAppCommunity()\n            await c.playTransactions(userTree, [mintTokenTransaction(state.tokenName, state.amount)])\n            setState({...state, loading: false, tokenName: '', amount: 0})\n            onClose()\n        }\n        doAsync()\n    }\n\n    const tokenOptions = Object.keys(tokens).map((tokenName) => {\n        return <option key={tokenName} value={tokenName}>{tokenName}</option>\n    })\n\n    return (\n    <Modal show={show} onClose={onClose}>\n        <Modal.Card style={{backgroundColor: 'white'}}>\n        <Modal.Card.Head>\n            <Modal.Card.Title>\n                Mint Token\n            </Modal.Card.Title>\n        </Modal.Card.Head>\n        <Modal.Card.Body>\n            <Media>\n                {state.loading ?\n                <Loader />\n                :                \n                <Media.Item>\n                    <Content>\n                        <Form.Field>\n                            <Form.Label>Token Name</Form.Label>\n                            <Form.Control>\n                                <Form.Select onChange={handleChange} value={state.tokenName} name=\"tokenName\">\n                                    <option value=\"\"></option>\n                                    {tokenOptions}\n                                </Form.Select>\n                            </Form.Control>\n                        </Form.Field>\n                        <Form.Field>\n                            <Form.Label>Amount</Form.Label>\n                            <Form.Control>\n                                <Form.Input type=\"number\" value={state.amount.toString()} onChange={handleChange} name=\"amount\" placeholder=\"Amount to Mint\" />\n                            </Form.Control>\n                        </Form.Field>\n                        <Form.Field kind=\"group\">\n                            <Button color=\"primary\" onClick={handleSubmit}>Mint</Button>\n                            <Button text onClick={() => { onClose() }}>cancel</Button>\n                        </Form.Field>\n                    </Content>\n                </Media.Item>\n                }\n            </Media>\n        </Modal.Card.Body>\n        </Modal.Card>\n    </Modal>\n)\n}\n\n","import debug from 'debug'\n\nconst log = debug(\"util:syncher\")\n\ninterface queuedFunction {\n    fn:Function\n    res:Function\n    rej:Function\n}\n\n/**\n * SimpleActor is used to serialize function calls, it is a single threaded\n * actor that does one function after the next. Every send returns a promise\n * that is executed after the serialization\n */\nexport class SimpleSyncher {\n    private queue:queuedFunction[]\n    private started:boolean\n    private name?:string\n    constructor(name?:string) {\n        this.started = false\n        this.queue = []\n        this.name = name\n    }\n\n    private async run() {\n        const queuedFn = this.queue.pop()\n        if (queuedFn === undefined) {\n            log(this.name, ' stopping syncher')\n            this.started = false\n            return\n        }\n        try {\n            log(this.name, ' run fn', queuedFn.fn.toString())\n            const resp = await queuedFn.fn()\n            log(this.name, ' finish fn')\n            queuedFn.res(resp)\n        } catch(err) {\n            log(this.name, ' rejecting: ', err)\n            queuedFn.rej(err)\n        }\n        if (this.queue.length > 0) {\n            log(this.name, \"syncher queueing another\")\n            this.run()\n        } else {\n            this.started = false\n        }\n    }\n\n    send(fn:Function) {\n        const p = new Promise((resolve,reject) => {\n            this.queue.push({\n                fn:fn,\n                res: resolve,\n                rej:reject,\n            })\n            if (!this.started) {\n                log(this.name, \" not started, starting\")\n                this.started = true\n                this.run()\n                return\n            }\n            log(this.name, ' run already started')\n        })\n       \n        return p\n    }\n\n\n}","import React, { useState } from 'react'\n\nimport { Modal, Form, Button, Media, Content, Loader } from 'react-bulma-components'\nimport { ChainTree, receiveTokenTransactionFromPayload, sendTokenTransaction } from 'tupelo-wasm-sdk'\nimport { getAppCommunity } from '../util/appcommunity'\nimport { SimpleSyncher } from '../util/syncher'\nimport { TokenPayload } from 'tupelo-messages'\n\n\nconst tokenPath = \"/tree/_tupelo/tokens\";\n\n//TODO: this would be nice with error handling, etc\n\nexport function ReceiveTokenDialog({ show, onClose, userTree }: { userTree: ChainTree, show: boolean, onClose: (() => void) }) {\n\n    const [state, setState] = useState({\n        loading: false,\n        did: '',\n    })\n\n    const handleChange = (evt: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n        setState({ ...state, [evt.target.name]: evt.target.value })\n    }\n\n    const handleSubmit = () => {\n        setState({ ...state, loading: true })\n        const doAsync = async () => {\n            const c = await getAppCommunity()\n\n            const userDid = await userTree.id()\n            if (userDid === null) {\n                throw new Error(\"user tree had null id\")\n            }\n            const tip = await c.getTip(state.did)\n            const tree = new ChainTree({\n                store: c.blockservice,\n                tip: tip,\n                key: userTree.key,\n            })\n            const tokensResp = await tree.resolve(tokenPath)\n            const tokens = await Promise.all(Object.keys(tokensResp.value || {}).map(async (key) => {\n                const tResp = await tree.resolve(tokenPath + \"/\" + key)\n                return {\n                    name: key,\n                    balance: tResp.value['balance'],\n                }\n            }));\n\n            const syncher = new SimpleSyncher()\n            const sendPayloads = await Promise.all(tokens.map((token) => {\n                return syncher.send(() => {\n                    return c.sendTokenAndGetPayload(tree, sendTokenTransaction(\"uuid\" + Math.random().toString(), token.name, token.balance, userDid))\n                })\n            })) as TokenPayload[]\n            const rxTransactions = sendPayloads.map((payload) => {\n                return receiveTokenTransactionFromPayload(payload)\n            })\n            await c.playTransactions(userTree, rxTransactions)\n            setState((s) => {\n                return { ...s, loading: false, did: '' }\n            })\n            onClose()\n        }\n        doAsync()\n    }\n\n    return (\n        <Modal show={show} onClose={onClose}>\n            <Modal.Card style={{ backgroundColor: 'white' }}>\n                <Modal.Card.Head>\n                    <Modal.Card.Title>\n                        Receive Token\n            </Modal.Card.Title>\n                </Modal.Card.Head>\n                <Modal.Card.Body>\n                    <Media>\n                        {state.loading ?\n                            <Loader />\n                            :\n                            <Media.Item>\n                                <Content>\n                                    <Form.Field>\n                                        <Form.Label>DID</Form.Label>\n                                        <Form.Control>\n                                            <Form.Input value={state.did} onChange={handleChange} name=\"did\" placeholder=\"DID of tokens\" />\n                                        </Form.Control>\n                                        <Form.Help>\n                                            This is the code that begins with 'did:tupelo:' that the sender has from the wallet.å\n                            </Form.Help>\n                                    </Form.Field>\n                                    <Form.Field kind=\"group\">\n                                        <Button color=\"primary\" onClick={handleSubmit}>Receive</Button>\n                                        <Button text onClick={() => { onClose() }}>cancel</Button>\n                                    </Form.Field>\n                                </Content>\n                            </Media.Item>\n                        }\n                    </Media>\n                </Modal.Card.Body>\n            </Modal.Card>\n        </Modal>\n    )\n}\n\n","import React, { useContext, useState, useEffect } from 'react'\nimport { StoreContext } from '../state/store'\nimport { Redirect, RouteProps } from 'react-router'\nimport { Table, Loader, Button, Level } from 'react-bulma-components'\nimport { EstablishTokenDialog } from './establishtoken';\nimport { SendTokenDialog } from './sendtoken';\nimport { ChainTree } from 'tupelo-wasm-sdk'\nimport { MintTokenDialog } from './minttoken';\nimport { ReceiveTokenDialog } from './receivetoken';\n\nconst tokenPath = \"/tree/_tupelo/tokens\";\n\n\nexport function TokenWallet(props: RouteProps) {\n\n    const [state, setState] = useState({\n        loading: true,\n        tokens: {},\n        showEstablishModal: false,\n        showMintModal: false,\n        showSendModal: false,\n        showReceiveModal: false,\n        modifiedAt: 0,\n    })\n\n    const [globalState] = useContext(StoreContext)\n\n    useEffect(() => {\n        const loadTokens = async () => {\n            if (globalState.userTree === undefined) {\n                throw new Error(\"user tree must be defined\")\n            }\n            let tokenResp: any\n            try {\n                tokenResp = await globalState.userTree.resolve(tokenPath)\n            } catch (e) {\n                console.error(\"e: \", e)\n                setState((s) => {\n                    return { ...s, tokens: {}, loading: false }\n                })\n            }\n\n            console.log(\"tokens resp: \", tokenResp)\n            setState((s) => {\n                return { ...s, tokens: (tokenResp.value || {}), loading: false }\n            })\n        }\n\n        console.log(\"loading tokens\")\n        loadTokens()\n        \n    }, [globalState.userTree, state.modifiedAt])\n\n    if (!globalState.userTree) {\n        return (\n            <Redirect to={{\n                pathname: \"/login\",\n                state: { from: props.location },\n            }} />\n        )\n    }\n\n    if (state.loading) {\n        return <Loader />\n    }\n\n    const tokenRows = Object.keys(state.tokens).map((tokenName) => {\n        if (globalState.userTree === undefined) {\n            throw new Error(\"undefined user tree!\")\n        }\n        return <TokenRow key={tokenName} modifiedAt={state.modifiedAt} tree={globalState.userTree} tokenName={tokenName} />\n    })\n\n    const handleCloseModal = ()=> {\n        console.log(\"setting modifiedAt\")\n        setState((s) => {return {...s, modifiedAt: Date.now()}})\n    }\n\n    return (\n        <div>\n            <EstablishTokenDialog userTree={globalState.userTree} show={state.showEstablishModal} onClose={() => { handleCloseModal(); setState({ ...state, showEstablishModal: false }) }} />\n            <MintTokenDialog tokens={state.tokens} userTree={globalState.userTree} show={state.showMintModal} onClose={() => { handleCloseModal(); setState({ ...state, showMintModal: false }) }} />\n            <SendTokenDialog tokens={state.tokens} userTree={globalState.userTree} show={state.showSendModal} onClose={() => { handleCloseModal(); setState({ ...state, showSendModal: false }) }} />\n            <ReceiveTokenDialog userTree={globalState.userTree} show={state.showReceiveModal} onClose={() => { handleCloseModal(); setState({ ...state, showReceiveModal: false }) }} />\n            <Level>\n                <Level.Side align=\"left\">\n                    <Level.Item>\n                        <Button onClick={() => { setState({ ...state, showSendModal: true }) }}>Send Token</Button>\n                    </Level.Item>\n                    <Level.Item>\n                        <Button onClick={() => { setState({ ...state, showReceiveModal: true }) }}>Receive Token</Button>\n                    </Level.Item>\n                </Level.Side>\n            </Level>\n            <Table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Balance</th>\n                        <th>Max</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tokenRows}\n                </tbody>\n            </Table>\n            <Level>\n                <Level.Side align=\"left\">\n                    <Level.Item>\n                        <Button onClick={() => { setState({ ...state, showEstablishModal: true }) }}>Establish Token</Button>\n                    </Level.Item>\n                    <Level.Item>\n                        <Button onClick={() => { setState({ ...state, showMintModal: true }) }}>Mint Token</Button>\n                    </Level.Item>\n                </Level.Side>\n            </Level>\n        </div>\n    )\n}\n\n\nexport const TokenRow = ({ tree, tokenName, modifiedAt }: { modifiedAt: number, tree: ChainTree, tokenName: string }) => {\n    const [state, setState] = useState({\n        balance: 0,\n        max: null,\n        loading: true,\n    })\n\n    useEffect(() => {\n        const loadInfo = async () => {\n            const tokenInfoPath = tokenPath + \"/\" + tokenName\n            const tokenInfoResp = await tree.resolve(tokenInfoPath)\n            console.log(\"tokenInfoResp \", tokenInfoPath, tokenInfoResp)\n            if (tokenInfoResp.value.monetaryPolicy) {\n                const monetaryPolicy = await tree.resolve(tokenInfoPath + \"/monetaryPolicy\")\n                setState((s) => { return { ...s, max: monetaryPolicy.value['maximum'] } })\n            }\n\n            setState((s) => {\n                return { ...s, balance: tokenInfoResp.value['balance'], loading: false }\n            })\n        }\n        console.log(\"loading tokenRow\")\n        loadInfo()\n    }, [tree, tokenName, modifiedAt])\n\n    return (\n        <tr>\n            <td>\n                {tokenName}\n            </td>\n            <td>\n                {state.loading ? <Loader /> : state.balance}\n            </td>\n            <td>\n                {state.loading ? <Loader /> : state.max}\n            </td>\n        </tr>\n    )\n}","import React, { useState } from 'react';\nimport { Heading, Form, Box,Button, Loader } from 'react-bulma-components';\nimport { Tupelo,ChainTree, EcdsaKey, setDataTransaction, setOwnershipTransaction } from 'tupelo-wasm-sdk';\nimport { getAppCommunity } from '../util/appcommunity';\n\nexport interface INFTProperties {\n    title: string\n    subtitle: string\n    content: string\n}\n\nexport function ObjectCreator({userTree}:{userTree:ChainTree}) {\n    const [state, setState] = useState({\n        title: \"\",\n        subtitle: \"\",\n        content: \"\",\n    } as { [index: string]: string })\n\n    const [loading,setLoading] = useState(false)\n\n    async function createNFT() {\n        const props = state\n        if (userTree.key === undefined) {\n            throw new Error(\"undefined userTree key\")\n        }\n        // first we create an ephemeral key\n        const ephemeralP = EcdsaKey.generate()\n        const communityP = getAppCommunity()\n    \n        const [ephemeralKey,c] = await Promise.all([ephemeralP,communityP])\n        // then a new chaintree\n        const treeP = ChainTree.newEmptyTree(c.blockservice, ephemeralKey)\n        const addrP = Tupelo.ecdsaPubkeyToAddress(userTree.key.publicKey)\n        const [tree,userAddr] = await Promise.all([treeP, addrP])\n        const did = await tree.id()\n        if (did === null) {\n            throw new Error(\"unknown tree DID\")\n        }\n        // now we set the data and CHOWN to the user\n        const nftP = c.playTransactions(tree, [\n            setDataTransaction(\"/_wallet/attributes\", {\n                title: props.title,\n                subtitle: props.subtitle,\n                content: props.content\n            }),\n            setOwnershipTransaction([userAddr]),\n        ])\n        // and we keep a record of the NFT in the user tree\n        const userP = c.playTransactions(userTree, [\n            setDataTransaction(\"/_wallet/nfts/\" + did, Date.now())\n        ])\n        await Promise.all([nftP, userP])\n        setState({})\n        setLoading(false)\n    }\n\n    const changeHandler = (evt: React.ChangeEvent<HTMLInputElement>) => {\n        const target = evt.target\n        setState({...state,\n            [target.name]: target.value,\n        })\n    }\n\n    const submitHandler = ()=> {\n        setLoading(true)\n        createNFT()\n    }\n\n    return (\n        <div>\n            <Heading>Object Creator</Heading>\n            <p>This lets you create an NFT!</p>\n            {loading ?\n            <Loader/> \n        :\n            <Box style={{ marginTop: '1em' }}>\n                <Form.Field>\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control>\n                        <Form.Input value={state.title} onChange={changeHandler} name=\"title\" placeholder=\"title\" />\n                    </Form.Control>\n                </Form.Field>\n                <Form.Field>\n                    <Form.Label>Subtitle</Form.Label>\n                    <Form.Control>\n                        <Form.Input value={state.subtitle} onChange={changeHandler} name=\"subtitle\" placeholder=\"subtitle\" />\n                    </Form.Control>\n                </Form.Field>\n                <Form.Field>\n                    <Form.Label>Content</Form.Label>\n                    <Form.Control>\n                        <Form.Input value={state.content} onChange={changeHandler} name=\"content\" placeholder=\"content\" />\n                    </Form.Control>\n                </Form.Field>\n                <Button onClick={submitHandler}>Create</Button>\n            </Box>}\n        </div>\n    )\n}","import React, { useContext, useState, useEffect } from 'react';\nimport { Box, Button, Form, Media, Card, Heading, Content, Loader, Columns } from 'react-bulma-components';\nimport { StoreContext, IAppMessage, AppActions } from '../state/store';\nimport { ChainTree, Tupelo, setOwnershipTransaction, setDataTransaction } from 'tupelo-wasm-sdk';\nimport { getAppCommunity } from '../util/appcommunity';\nimport { INFTProperties } from './creator';\nimport { getUserTree } from '../util/usernames';\n\ntype DidList = { [index: string]: number }\n\ninterface IOnSendEvent {\n    did: string\n    tree: ChainTree\n    destination: string\n    dids: DidList\n}\n\n\nfunction NFTCard({ did, onSend, userTree }: { userTree:ChainTree, did: string, onSend: Function }) {\n    const [,globalDispatch] = useContext(StoreContext)\n    \n    const [state, setState] = useState({\n        loading: true,\n        tree: undefined as ChainTree | undefined,\n        attrs: {} as INFTProperties,\n        sending: false,\n        destination: \"\",\n        destinationError: '',\n    })\n\n    const isDestErrored = ()=> {\n        return state.destinationError !== ''\n    }\n\n    useEffect(() => {\n        const loadNFT = async () => {\n            const c = await getAppCommunity()\n            const tip = await c.getTip(did)\n            const tree = new ChainTree({\n                store: c.blockservice,\n                tip: tip,\n            })\n            const attrsResp = await tree.resolveData(\"/_wallet/attributes\")\n            setState((s) => {\n                return { ...s, loading: false, tree: tree, attrs: (attrsResp.value || {}) }\n            })\n        }\n\n        loadNFT()\n    }, [did])\n\n    const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n        setState({ ...state, destination: evt.target.value })\n    }\n\n    const handleSend = () => {\n        setState({ ...state, loading: true, sending: false, destinationError: '' })\n\n        const doAsync = async ()=> {\n            const c = await getAppCommunity()\n\n            if (state.tree === undefined) {\n                throw new Error(\"card must have a tree to send\")\n            }\n\n            let destTree\n            try {\n                destTree = await getUserTree(state.destination)\n            } catch(e) {\n                if (e === 'not found') {\n                    setState((s)=> {\n                        return {...s, loading: false, sending: true, destinationError: 'Unknown username'}\n                    })\n                    return\n                }\n                throw e\n            }\n            const authResp = await destTree.resolve(\"tree/_tupelo/authentications\")\n    \n            state.tree.key = userTree.key\n            console.log(\"reassigning \", did, \" to: \", state.destination)\n            // set the auth of this NFT to the same as the receiver\n            await c.playTransactions(state.tree, [\n                setOwnershipTransaction(authResp.value)\n            ])\n    \n            console.log('remove did from nfts')\n            // remove this NFT from my bag of hodling\n            const dids = (await userTree.resolveData(\"/_wallet/nfts\")).value\n\n            const { [did]: value, ...didsWithoutSent } = dids\n            await c.playTransactions(userTree, [\n                setDataTransaction(\"/_wallet/nfts\", didsWithoutSent)\n            ])\n            setState((s)=>{\n                return {...s, sending: false, loading: false, destinationError: ''}\n            })\n            globalDispatch({\n                type: AppActions.message,\n                message: {\n                    title: \"Sent an NFT to user: \" + state.destination,\n                    body: \"Ask \" + state.destination + \" to use this DID in their Add: \\n\" + did, \n                }\n            } as IAppMessage)\n            onSend({\n                did: did,\n                tree: state.tree,\n                destination: state.destination,\n                dids: didsWithoutSent,\n            } as IOnSendEvent)\n        }\n        doAsync()\n    }\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Header.Title>{state.attrs.title}</Card.Header.Title>\n            </Card.Header>\n            <Card.Content>\n                {state.loading ?\n                    <Loader />\n                    :\n                    <div>\n                        <Media>\n                            <Media.Item>\n                                <Heading size={4}>\n                                    {state.attrs.title}\n                                </Heading>\n                                <Heading subtitle size={6}>\n                                    {state.attrs.subtitle}\n                                </Heading>\n                            </Media.Item>\n                        </Media>\n                        <Content>\n                            {state.attrs.content}\n                            <pre style={{marginTop:'1em'}}>{did}</pre>\n                        </Content>\n                    </div>}\n            </Card.Content>\n            <Card.Footer>\n                {!state.sending ?\n                    <Card.Footer.Item>\n                        <Button onClick={() => { setState({ ...state, sending: true }) }}>Send</Button>\n                    </Card.Footer.Item>\n                    :\n                    <Content style={{ padding: '1em' }}>\n                        <Form.Field>\n                            <Form.Label>Destination Name</Form.Label>\n                            <Form.Control>\n                                <Form.Input color={isDestErrored() ? 'danger' : 'info'} value={state.destination} onChange={handleChange} name=\"nftdestination\" placeholder=\"Destination\" />\n                            </Form.Control>\n                            {isDestErrored() && <Form.Help color=\"danger\">{state.destinationError}</Form.Help>}\n                        </Form.Field>\n                        <Form.Field kind=\"group\">\n                            <Button color=\"primary\" onClick={handleSend}>Send</Button>\n                            <Button text onClick={() => { setState({ ...state, sending: false, destination: \"\" }) }}>cancel</Button>\n                        </Form.Field>\n                    </Content>\n                }\n            </Card.Footer>\n        </Card>\n    )\n}\n\nexport function ObjectWallet() {\n\n    const [globalState] = useContext(StoreContext)\n    const [state, setState] = useState({\n        loading: true,\n        dids: {} as DidList,\n    })\n\n    if (globalState.userTree === undefined) {\n        throw new Error(\"must have a userTree to use ObjectWallet\")\n    }\n\n    const onSend = async (evt: IOnSendEvent) => {\n        setState((s) => {\n            return { ...s, dids: evt.dids }\n        })\n    }\n\n    useEffect(() => {\n        const getObjects = async () => {\n            if (globalState.userTree === undefined) {\n                throw new Error(\"user tree has to be defined\")\n            }\n            const tResp = await globalState.userTree.resolveData(\"/_wallet/nfts\")\n            setState((s) => {\n                return { ...s, loading: false, dids: (tResp.value || {}) }\n            })\n        }\n\n        if (globalState.userTree) {\n            getObjects()\n        }\n    }, [globalState.userTree])\n\n    const cards = Object.keys(state.dids).map((did) => {\n        if (globalState.userTree === undefined) {\n            throw new Error(\"must hae a user tree to list dids\")\n        }\n        return (\n            <Columns.Column key={did} size=\"half\">\n                <NFTCard userTree={globalState.userTree} onSend={onSend} did={did} />\n            </Columns.Column>\n        )\n    })\n\n    const handleAdd = function(did:string) {\n        setState((s) => {\n            return {...s, dids: {...state.dids, [did]: Date.now()}}\n        })\n    }\n\n    return (\n        <div>\n            <Heading>Object wallet</Heading>\n            <Columns>\n                {state.loading && <Loader />}\n                {cards}\n            </Columns>\n            <AddObjectForm onAdd={handleAdd} userTree={globalState.userTree} />\n        </div>\n    )\n}\n\nconst AddObjectForm = ({ userTree, onAdd }: { userTree: ChainTree, onAdd:Function }) => {\n    const [state, setState] = useState({\n        addOpen: false,\n        addDid: \"\",\n        addLoading: false,\n    })\n\n    const handleAdd = () => {\n        setState({ ...state, addLoading: true })\n        const did = state.addDid\n        const doAsync = async () => {\n            if (userTree === undefined || userTree.key === undefined) {\n                throw new Error(\"user tree undfined\")\n            }\n\n            const c = await getAppCommunity()\n            const nftTip = await c.getTip(did)\n            const nftTree = new ChainTree({\n                store: c.blockservice,\n                tip: nftTip,\n            })\n            let userAddr = await Tupelo.ecdsaPubkeyToAddress(userTree.key.publicKey)\n            let resolveResp = await nftTree.resolve(\"tree/_tupelo/authentications\")\n            let auths: string[] = resolveResp.value\n            if (auths.includes(userAddr)) {\n                // this tree does belong to the user\n                await c.playTransactions(userTree, [\n                    setDataTransaction(\"/_wallet/nfts/\" + did, Date.now())\n                ])\n                onAdd(did)\n                setState({ ...state, addLoading: false, addDid: \"\" })\n            }\n            setState({ ...state, addLoading: false, addDid: \"\",addOpen: false })\n        }\n        doAsync()\n    }\n\n    const AddForm = ()=> {\n        if (state.addLoading) {\n            return <Loader/>\n        }\n        return (\n        <Box>\n        <Form.Field>\n            <Form.Label>Add</Form.Label>\n            <Form.Control>\n                <Form.Input value={state.addDid} onChange={(evt) => { setState({ ...state, addDid: evt.target.value }) }} name=\"additionalDid\" placeholder=\"DID\" />\n            </Form.Control>\n        </Form.Field>\n        <Form.Field kind=\"group\">\n            <Button onClick={handleAdd} color=\"primary\">Add</Button>\n            <Button text onClick={() => { setState((s) => { return { ...s, addOpen: false, addDid: '' } }) }}>Cancel</Button>\n        </Form.Field>\n        </Box>\n        )\n    }\n\n    return (\n        <div>\n            {state.addOpen ?\n                <AddForm/>\n                :\n                <Button onClick={() => { setState((s) => { return { ...s, addOpen: true } }) }}>Add</Button>\n            }\n        </div>\n    )\n}","import React, { useContext, useState } from 'react';\nimport { StoreContext } from '../state/store';\nimport { Redirect, RouteProps } from 'react-router';\nimport { Tabs, Container, Heading, Footer, Content } from 'react-bulma-components';\nimport { TokenWallet } from '../components/tokenwallet';\nimport { ObjectCreator } from '../components/creator';\nimport { ObjectWallet } from '../components/objectwallet';\n\nenum tabs {\n    objects,\n    tokens,\n    creator,\n}\ntype tabStrings = keyof typeof tabs;\n\nexport function Wallet(props: RouteProps) {\n\n    const [state, setState] = useState({\n        currentTab: tabs.objects,\n    })\n    const [globalState] = useContext(StoreContext)\n\n    const clickHandler = (evt: any) => {\n        const tabStr: tabStrings = evt.target.innerText.toLowerCase()\n        setState({ ...state, currentTab: tabs[tabStr] })\n    }\n\n    const pageContent = (tab: tabs) => {\n        if (globalState.userTree === undefined) {\n            throw new Error(\"can't get page content without a usertree\")\n        }\n        switch (tab) {\n            case tabs.tokens:\n                return <TokenWallet />\n            case tabs.creator:\n                return <ObjectCreator userTree={globalState.userTree} />\n            case tabs.objects:\n                return <ObjectWallet />\n            default:\n                throw new Error(\"unrecognized tab: \" + tab)\n        }\n    }\n\n    if (!globalState.userTree) {\n        return (\n            <Redirect to={{\n                pathname: \"/login\",\n                state: { from: props.location },\n            }} />\n        )\n    }\n\n    return (\n        <Container>\n            <Heading>Wallet of {globalState.username}</Heading>\n            <Tabs>\n                <Tabs.Tab onClick={clickHandler} active={state.currentTab === tabs.objects}>Objects</Tabs.Tab>\n                <Tabs.Tab onClick={clickHandler} active={state.currentTab === tabs.tokens}>Tokens</Tabs.Tab>\n                <Tabs.Tab onClick={clickHandler} active={state.currentTab === tabs.creator}>Creator</Tabs.Tab>\n            </Tabs>\n            {pageContent(state.currentTab)}\n            <p style={{marginTop: '5em'}}>wallet did: {globalState.userDid}</p>\n        </Container>\n    )\n}","import React, { useContext } from 'react';\nimport { Message, Button, Container } from 'react-bulma-components';\nimport { StoreContext, IAppMessage, AppActions, IAppRemoveMessage } from '../state/store';\n\nexport function UserMessageList() {\n    const [globalState] = useContext(StoreContext)\n\n    const lis = globalState.messages.map((msg)=> {\n        return <MessageElement message={msg} />\n    })\n\n    return (\n        <Container>\n            <ol style={{ listStyleType: 'none' }}>\n                {lis}\n            </ol>\n        </Container>\n    )\n}\n\nconst MessageElement = ({ message }: { message: IAppMessage}) => {\n    const [,globalDispatch] = useContext(StoreContext)\n\n    if (message.id === undefined) {\n        throw new Error(\"a message must have an id when it's in the list\")\n    }\n\n    return (\n        <li key={message.id}>\n            <Message color=\"info\">\n                <Message.Header>\n                    {message.title}\n                <Button remove onClick={()=> { globalDispatch({type: AppActions.removeMessage, id: message.id} as IAppRemoveMessage) }}/>\n                </Message.Header>\n                <Message.Body style={{whiteSpace: 'pre'}}>\n                    {message.body}\n              </Message.Body>\n            </Message>\n        </li>\n    )\n}","import React, { useContext } from 'react';\nimport './App.css';\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\nimport { Navbar, Container, Loader, Columns, Section } from 'react-bulma-components'\nimport { LoginForm } from './pages/login';\nimport { StoreProvider, StoreContext } from './state/store';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Wallet } from './pages/wallet';\n\nimport { UserMessageList } from './components/messagelist'\n\nconst Routing = () => {\n  const [globalState] = useContext(StoreContext)\n\n\n  return (\n    globalState.loading > 0 ?\n      <Section>\n        <Columns className=\"is-desktop is-centered is-vcentered\">\n          <Loader style={{ height: 100, width: 100 }} />\n        </Columns>\n      </Section>\n      :\n      <div>\n        <UserMessageList />\n        <Router>\n          <Switch>\n            <Route path=\"/login\">\n              <LoginForm />\n            </Route>\n            <Route path=\"/wallet\">\n              <Wallet />\n            </Route>\n            <Route>\n              <LoginForm />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n  )\n}\n\n\nconst App: React.FC = () => {\n\n  return (\n    <StoreProvider >\n      <Container>\n        <Navbar transparent={false}>\n          <Navbar.Brand>\n            Tupelo\n        </Navbar.Brand>\n        </Navbar>\n      </Container>\n      <Routing />\n\n    </StoreProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nimport { Community } from 'tupelo-wasm-sdk';\nimport debug from 'debug';\n\nconst log = debug(\"appcommunity\")\n\nlet _appPromise: Promise<Community>\n\nexport function getAppCommunity(): Promise<Community> {\n    log(\"getAppCommunity\")\n    if (_appPromise !== undefined) {\n        return _appPromise\n    }\n    _appPromise = new Promise(async (resolve, reject) => {\n        let c: Community\n        switch (process.env.NODE_ENV) {\n            case 'production':\n                log('using production community')\n                c = await Community.getDefault()\n                break;\n            default:\n                log('using development community')\n                c = await Community.freshLocalTestCommunity()\n        }\n        resolve(c)\n    })\n    return _appPromise\n}\n","import React, { useReducer, useState, useContext } from 'react';\nimport { Columns, Heading, Form, Icon, Loader, Button } from 'react-bulma-components';\nimport { getAppCommunity } from '../util/appcommunity';\nimport { EcdsaKey, ChainTree, Tupelo, setOwnershipTransaction, setDataTransaction } from 'tupelo-wasm-sdk';\nimport { RouteProps, Redirect } from 'react-router';\nimport {StoreContext, AppActions, IAppLogin} from '../state/store'\nimport {publicUserKey, usernameKey} from '../util/usernames'\n\ninterface ILoginState {\n    loading: boolean\n    username: string\n    password: string\n    userTree?: ChainTree\n    loadingText: string\n}\n\nenum Actions {\n    loginFormType,\n    passwordFormType,\n    userTree,\n    registering,\n    loggingIn,\n}\n\ninterface ILoginActions {\n    type: Actions\n}\n\ninterface IUsernameType extends ILoginActions {\n    type: Actions.loginFormType\n    username: string\n    dispatch: Function\n}\n\ninterface IPasswordType extends ILoginActions {\n    type: Actions.passwordFormType\n    password: string\n}\n\ninterface IUserTree extends ILoginActions {\n    type: Actions.userTree\n    username: string\n    tree?: ChainTree\n    dispatch: Function\n}\n\nconst initialState = {\n    loading: false,\n    username: '',\n    password: '',\n    loadingText: '',\n}\n\n\nlet usernameTimeout: number | undefined;\n\n// debounced username checker\nconst checkUsername = (state: ILoginState, dispatch: Function) => {\n\n    const later = async () => {\n        const c = await getAppCommunity()\n\n        const username = state.username\n        if (!username) {\n            return //nothing to do on an empty username\n        }\n        console.log(\"actually checking: \", username)\n        const key = await publicUserKey(username)\n        // Convert the key to a tupelo DID (ChainTree id)\n        const did = await Tupelo.ecdsaPubkeyToDid(key.publicKey)\n\n        let tip\n        let tree: ChainTree | undefined = undefined\n        try {\n            tip = await c.getTip(did)\n        } catch (e) {\n            if (e === \"not found\") {\n                // do nothing, let tip be null\n            }\n        }\n        if (tip !== undefined) {\n            tree = new ChainTree({\n                store: c.blockservice,\n                tip: tip,\n            })\n        }\n\n        dispatch({\n            type: Actions.userTree,\n            username: username,\n            tree: tree,\n            dispatch: dispatch,\n        } as IUserTree)\n\n        usernameTimeout = undefined;\n    };\n\n    clearTimeout(usernameTimeout);\n    usernameTimeout = setTimeout(later, 150) as any; // nodejs and browser have differing types for the timeout return\n}\n\nfunction reducer(state: ILoginState, action: ILoginActions) {\n    switch (action.type) {\n        case Actions.loginFormType:\n            const username = (action as IUsernameType).username\n            checkUsername(state, (action as IUsernameType).dispatch)\n            return { ...state, loading: true, loginText: 'Checking for username availability', username: username }\n        case Actions.userTree:\n            const act = action as IUserTree\n            console.log(\"user tree received: \", act.username, \" state: \", state.username)\n            if (act.username !== state.username) {\n                // this means we missed one\n                checkUsername(state, act.dispatch)\n                return state // don't update anything yet\n            }\n            return { ...state, loading: false, loadingText: '', userTree: (action as IUserTree).tree }\n        case Actions.passwordFormType:\n            return { ...state, password: (action as IPasswordType).password }\n        case Actions.registering:\n            return { ...state, loading: true, loadingText: 'Registering your user' }\n        case Actions.loggingIn:\n            return { ...state, loading: true, loadingText: 'Logging in' }\n        default:\n            throw new Error(\"unkown type: \" + action.type)\n    }\n}\n\nconst isAvailable = (state: ILoginState) => {\n    return !state.loading && state.username && !state.userTree\n}\n\n// colors: '\"link\" | \"success\" | \"primary\" | \"info\" | \"warning\" | \"danger\" | \"light\" | \"dark\" | \"white\" | \"black\" |\n\nfunction UsernameField({ state, onChange }: { state: ILoginState, onChange: React.ChangeEventHandler }) {\n    return (\n        <Form.Field>\n            <Form.Label>Username</Form.Label>\n            <Form.Control iconLeft>\n                <Form.Input color={isAvailable(state) ? \"success\" : \"info\"} type=\"text\" placeholder=\"Username\" value={state.username} onChange={onChange} />\n                {state.loading ?\n                    <Icon align=\"left\"><span className=\"fas fa-spinner fa-pulse\" /></Icon>\n                    :\n                    <Icon align=\"left\"><span className=\"fas fa-user\" /></Icon>\n                }\n            </Form.Control>\n            {isAvailable(state) && <Form.Help color=\"success\">This username is available</Form.Help>}\n        </Form.Field>\n    )\n}\n\nfunction PasswordField({ name, value, onChange, error }: { name: string, value: string, error: string, onChange: React.ChangeEventHandler }) {\n    return (\n        <Form.Field>\n            <Form.Label>{name}</Form.Label>\n            <Form.Control iconLeft>\n                <Form.Input className={error ? \"animated pulse faster\" : \"\"} color={error ? \"danger\" : \"info\"} type=\"password\" placeholder=\"Password\" value={value} onChange={onChange} />\n                <Icon align=\"left\"><span className=\"fas fa-key\" /></Icon>\n            </Form.Control>\n            {error && <Form.Help color=\"danger\">{error}</Form.Help>}\n        </Form.Field>\n    )\n}\n\n// the elements at the bottom of a login form\nfunction LoginBottom({ state, dispatch, onLogin }: { state: ILoginState, dispatch: Function, onLogin:Function }) {\n    const [password, setPassword] = useState('')\n    const [error, setError] = useState('')\n\n    const handleSubmit = async () => {\n        if (state.userTree === undefined) {\n            throw new Error(\"must have a user tree to login\")\n        }\n\n        const tree = state.userTree\n        const username = state.username\n\n        let secureKey = await EcdsaKey.passPhraseKey(Buffer.from(password), Buffer.from(username))\n        let secureAddr = await Tupelo.ecdsaPubkeyToAddress(secureKey.publicKey)\n        let resolveResp = await tree.resolve(\"tree/_tupelo/authentications\")\n        let auths: string[] = resolveResp.value\n        if (auths.includes(secureAddr)) {\n            tree.key = secureKey\n            onLogin(state.userTree)\n        } else {\n            setError(\"invalid password\")\n        }\n    }\n\n    return (\n        <div>\n            <PasswordField error={error} name=\"Password\" value={password} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setError(''); setPassword(evt.target.value) }} />\n            <Button onClick={handleSubmit}>Login</Button>\n        </div>\n    )\n}\n\n// the elements at the bottom of a login form\nfunction RegisterBottom({ state, dispatch, onLogin }: { state: ILoginState, dispatch: Function, onLogin:Function }) {\n    const [password, setPassword] = useState('')\n    const [passwordConfirm, setPasswordConfirm] = useState('')\n    const [error, setError] = useState('')\n\n    const isConfirmed = () => {\n        return password === passwordConfirm\n    }\n\n    const handleSubmit = () => {\n        if (!isConfirmed()) {\n            setError('Passwords do not match')\n            return // do nothing here\n        }\n        dispatch({ type: Actions.registering })\n        const doRegister = async ()=> {\n            const username = state.username\n            const insecureKey = await publicUserKey(username)\n    \n            const secureKey = await EcdsaKey.passPhraseKey(Buffer.from(password), Buffer.from(username))\n            const secureKeyAddress = await Tupelo.ecdsaPubkeyToAddress(secureKey.publicKey)\n    \n            const community = await getAppCommunity()\n            const tree = await ChainTree.newEmptyTree(community.blockservice, insecureKey)\n    \n            await community.playTransactions(tree, [\n                // Set the ownership of the chaintree to our secure key (thus owning the username)\n                setOwnershipTransaction([secureKeyAddress]),\n                // Cache the username inside of the chaintree for easier access later\n                setDataTransaction(usernameKey, username),\n            ])\n            tree.key = secureKey\n            onLogin(tree)\n        }\n        doRegister()\n    }\n\n    return (\n        <div>\n            <PasswordField error={error} name=\"Password\" value={password} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setError(''); setPassword(evt.target.value) }} />\n            <PasswordField error={error} name=\"Confirm Password\" value={passwordConfirm} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setError(''); setPasswordConfirm(evt.target.value) }} />\n            <Button onClick={handleSubmit}>Register</Button>\n        </div>\n    )\n}\n\nexport function LoginForm(props:RouteProps) {\n    const [state, dispatch] = useReducer(reducer, initialState)\n    const [redirect,doRedirect] = useState(false)\n\n    const [,globalDispatch] = useContext(StoreContext)\n\n    const handleUsernameChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch({ type: Actions.loginFormType, username: evt.target.value, dispatch: dispatch } as IUsernameType)\n    }\n\n    const onLogin = async (tree:ChainTree) => {\n        const did = await tree.id()\n        globalDispatch({\n            type: AppActions.login,\n            userTree: tree,\n            username: state.username,\n            did: did,\n        } as IAppLogin)\n        doRedirect(true)\n    }\n\n    let { from } = (props.location && props.location.state) ? props.location.state : { from: { pathname: \"/wallet\" } };\n\n    if (redirect) {\n        return (\n            <Redirect to={from}/>\n        )\n    }\n\n    return (\n        <div>\n            <Columns className=\"is-desktop is-centered\">\n                <Columns.Column size={\"half\"} className=\"is-centered\">\n                    <Heading className=\"animated flipInX fast\">Hello.</Heading>\n                    <p>Find or create your wallet.</p>\n                </Columns.Column>\n            </Columns>\n\n            <Columns className=\"is-desktop is-centered\">\n                <Columns.Column size={\"half\"}>\n                    <UsernameField state={state} onChange={handleUsernameChange} />\n                    {state.loading && state.username && \n                        <div>\n                            <Loader style={{ width: 25, height: 25 }} />\n                            <p className=\"animated flipInX fast\">{state.loadingText}</p>\n                        </div>\n                    }\n                    {!state.loading && state.username && state.userTree && <LoginBottom state={state} dispatch={dispatch} onLogin={onLogin}/>}\n                    {!state.loading && state.username && !state.userTree && <RegisterBottom state={state} dispatch={dispatch} onLogin={onLogin} />}\n                </Columns.Column>\n            </Columns>\n        </div>\n    )\n}\n","import React, { createContext, useReducer, useEffect, useState } from \"react\";\nimport { ChainTree, EcdsaKey } from \"tupelo-wasm-sdk\";\nimport { getAppCommunity } from \"../util/appcommunity\";\nimport { usernameKey } from \"../util/usernames\";\n\ndeclare const Go: any;\n\nif (window) {\n  const subDirectory = window.location.pathname\n  console.log(\"subDirectory \", subDirectory)\n\n  if (subDirectory !== '/') {\n    console.log(\"setting wasmpath to: \", subDirectory + \"tupelo.wasm\")\n    Go.setWasmPath(subDirectory + \"tupelo.wasm\");\n  }\n}\n\ninterface IAppState {\n  userTree?: ChainTree\n  username?: string\n  userDid?: string\n  loading: number\n  messages: IAppMessage[]\n}\n\nexport interface IAppMessage {\n  id?: string\n  color?: string\n  title: string\n  body: string\n}\n\nexport enum AppActions {\n  loading,\n  stopLoading,\n  login,\n  setDID,\n  removeMessage,\n  message,\n  logout,\n  setUsername,\n}\n\nexport interface IAppAction {\n  type: AppActions\n}\n\nexport interface IAppLoading extends IAppAction {\n  type: AppActions.loading\n}\n\nexport interface IAppStopLoading extends IAppAction {\n  type: AppActions.stopLoading\n}\n\nexport interface IAppLogin extends IAppAction {\n  type: AppActions.login\n  userTree: ChainTree\n  username: string\n  did: string\n}\n\nexport interface IAppRemoveMessage extends IAppAction {\n  type: AppActions.removeMessage,\n  id: string\n}\n\nexport interface IAppMessage extends IAppAction {\n  type: AppActions.message,\n  message: IAppMessage,\n}\n\nexport interface IAppLogout extends IAppAction {\n  type: AppActions.logout\n}\n\ninterface IAppSetDid extends IAppAction {\n  type: AppActions.setDID\n  did: string\n}\n\ninterface IAppSetUsername extends IAppAction {\n  type: AppActions.setUsername\n  username: string\n}\n\nfunction reducer(state: IAppState, action: IAppAction) {\n  let act\n  switch (action.type) {\n    case AppActions.loading:\n      return { ...state, loading: state.loading + 1 }\n    case AppActions.stopLoading:\n      return { ...state, loading: state.loading - 1 }\n    case AppActions.login:\n      act = action as IAppLogin\n      return { ...state, userTree: act.userTree, username: act.username, did: act.did }\n    case AppActions.setDID:\n      return { ...state, userDid: (action as IAppSetDid).did }\n    case AppActions.setUsername:\n      return { ...state, username: (action as IAppSetUsername).username }\n    case AppActions.logout:\n      sessionStorage.removeItem('userDid')\n      sessionStorage.removeItem('userKey')\n      return {...initialState, loading: 0} \n    case AppActions.message:\n      const msg = (action as IAppMessage).message\n      msg.id = (new Date()).toString() + \"-\" + msg.title + Math.random().toString()\n      return { ...state, messages: [...state.messages, msg] }\n    case AppActions.removeMessage:\n      const id = (action as IAppRemoveMessage).id\n      let index = -1;\n      for (var i = state.messages.length - 1; i >= 0; i--) {\n        if (state.messages[i].id === id) {\n          index = i\n          break;\n        }\n      }\n      if (index === -1) {\n        return state // nothing to do here\n      }\n      return { ...state, messages: [...state.messages.slice(0, index), ...state.messages.slice(index + 1)] }\n    default:\n      throw new Error(\"unkown type: \" + action.type)\n  }\n}\n\nconst initialState = { loading: 1, messages: [] } as IAppState\n\nconst StoreContext = createContext([initialState, () => { }] as [IAppState, React.Dispatch<IAppAction>]);\n\nconst StoreProvider = ({ children }: { children: JSX.Element[] }) => {\n  const [firstRun, setFirstRun] = useState(true);\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // On every state set\n  useEffect(\n    () => {\n      if (firstRun) {\n        setFirstRun(false)\n\n        // go ahead and just get a community going\n        // it will make login/register faster\n        getAppCommunity()\n\n        const did = sessionStorage.getItem('userDid')\n        const userKey = sessionStorage.getItem('userKey')\n        const doAsyncSet = async () => {\n          if (!did || !userKey) {\n            throw new Error(\"no did or no userKey\")\n          }\n          const c = await getAppCommunity()\n          let tip\n          try {\n            tip = await c.getTip(did)\n          } catch(e) {\n            // in this case, the user had a set userDId, key, but\n            // the network didn't know about them, so let's just\n            // unset and let them login again\n            if (e === 'not found') {\n              dispatch({\n                type: AppActions.logout,\n              } as IAppLogout)\n              return\n            }\n            throw e\n          }\n          const key = await EcdsaKey.fromBytes(Buffer.from(userKey, 'base64'))\n\n          const tree = new ChainTree({\n            key: key,\n            tip: tip,\n            store: c.blockservice,\n          })\n          console.log('logging in from storage')\n\n          const username = (await tree.resolveData(usernameKey)).value\n\n          dispatch({\n            type: AppActions.login,\n            userTree: tree,\n            did: did,\n            username: username\n          } as IAppLogin)\n                    \n          dispatch({\n            type: AppActions.stopLoading,\n          } as IAppStopLoading)\n        }\n\n        if (did && userKey) {\n          doAsyncSet()\n        } else {\n          console.log('stopping loading')\n          dispatch({\n            type: AppActions.stopLoading\n          } as IAppStopLoading)\n        }\n      }\n\n      if (!state.userDid && state.userTree) {\n        // if we didn't yet assign the DID, do that\n        state.userTree.id().then((did) => {\n          dispatch({\n            type: AppActions.setDID,\n            did: did,\n          } as IAppSetDid)\n        })\n      }\n\n      if (state.userTree && state.userDid && state.userTree.key && state.userTree.key.privateKey) {\n        sessionStorage.setItem('userDid', state.userDid)\n        sessionStorage.setItem('userKey', Buffer.from(state.userTree.key.privateKey).toString('base64'))\n      }\n\n      console.log({ newState: state });\n    },\n    [state, firstRun]\n  );\n\n  // Render state, dispatch and special case actions\n  return (\n    <StoreContext.Provider value={[state, dispatch]}>\n      {children}\n    </StoreContext.Provider>\n  );\n};\n\nexport { StoreContext, StoreProvider };\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 536;","import { EcdsaKey, Tupelo, ChainTree } from \"tupelo-wasm-sdk\"\nimport { getAppCommunity } from \"./appcommunity\"\n\nexport const usernameKey = \"/_wallet/username\"\nexport const namespace = Buffer.from(\"_wallet-dev\")\n\n/**\n * Generates a public/private keypair from an *insecure* passphrase.\n * This method is used to generate a ChainTree with a known name (given a namespace)\n * The very first thing you do with the ChainTree should be to ChangeOwner\n * @param userName - the username\n */\nexport const publicUserKey = (userName: string) => {\n    return EcdsaKey.passPhraseKey(Buffer.from(userName), namespace)\n}\n\nexport const didFromUserName = async (userName: string) => {\n    const userKey = await publicUserKey(userName)\n    return Tupelo.ecdsaPubkeyToDid(userKey.publicKey)\n}\n\nexport const getUserTree = async (userName: string) => {\n    const c = await getAppCommunity()\n    const userDid = await didFromUserName(userName)\n    let userTip\n    try {\n        userTip = await c.getTip(userDid)\n    } catch(e) {\n        throw e\n    }\n\n    return new ChainTree({\n        store: c.blockservice,\n        tip: userTip\n    })\n}\n"],"sourceRoot":""}