{"version":3,"sources":["logo.svg","components/establishtoken.tsx","components/sendtoken.tsx","components/minttoken.tsx","util/syncher.ts","components/receivetoken.tsx","components/tokenwallet.tsx","components/tns.tsx","pages/wallet.tsx","components/tnsrouter.tsx","components/messagelist.tsx","App.tsx","serviceWorker.ts","index.tsx","util/appcommunity.ts","state/store.tsx","pages/login.tsx","components/creator.tsx","components/objectwallet.tsx","util/usernames.ts","../node_modules/tupelo-wasm-sdk/lib/js/go sync"],"names":["module","exports","EstablishTokenDialog","show","onClose","userTree","useState","loading","tokenName","maximum","state","setState","handleChange","evt","target","name","value","Card","style","backgroundColor","Head","Title","Body","Item","Field","Label","Control","Input","onChange","placeholder","type","toString","Help","kind","color","onClick","a","txsWithCommunityWait","establishTokenTransaction","doAsync","text","SendTokenDialog","tokens","useContext","StoreContext","globalDispatch","initialState","destination","amount","destinationError","amountError","isDestinationErrored","isAmountErrored","tokenOptions","Object","keys","map","key","Select","console","log","getAppCommunity","c","resolve","tokenPath","balanceResp","balance","parseInt","s","getUserTree","destTree","EcdsaKey","generate","ephemeralKey","ChainTree","newEmptyTree","blockservice","ephemeralTree","id","userDid","destDid","ephemeralDid","Error","userAuthResp","destAuthResp","sendId","Math","random","sendTx","sendTokenTransaction","toObject","sendTokenAndGetPayload","payload","receiveTx","receiveTokenTransactionFromPayload","setOwnershipTransaction","concat","AppActions","message","title","body","MintTokenDialog","mintTokenTransaction","debug","SimpleSyncher","queue","started","this","undefined","queuedFn","pop","fn","resp","res","rej","length","run","Promise","reject","push","ReceiveTokenDialog","did","getTip","tip","tree","store","tokensResp","all","tResp","syncher","token","send","sendPayloads","rxTransactions","TokenWallet","props","showEstablishModal","showMintModal","showSendModal","showReceiveModal","modifiedAt","globalState","useEffect","loadTokens","tokenResp","error","to","pathname","from","location","tokenRows","handleCloseModal","Date","now","Side","align","TokenRow","max","loadInfo","tokenInfoPath","tokenInfoResp","monetaryPolicy","TupeloNamingService","entries","loadEntries","resolveData","entriesResp","entryRows","entryName","entryChanged","tabs","EntryRow","pointer","entryInfoPath","tnsPath","entryInfoResp","SetEntry","entryPath","replace","setDataTransaction","Wallet","currentTab","clickHandler","tabStr","innerText","toLowerCase","Tab","active","objects","creator","tns","tab","pageContent","TNSRouter","username","chaintreeDataPath","walletHostname","process","walletHostnameComponents","split","reverse","hostnameComponents","window","hostname","allMatch","forEach","i","slice","join","getTreeForUsername","getIPFSAddr","dataPath","href","UserMessageList","lis","messages","msg","listStyleType","MessageElement","Header","remove","removeMessage","whiteSpace","Routing","className","height","width","path","NavBar","transparent","Brand","src","require","alt","Container","position","App","Boolean","match","loc","protocol","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","_appPromise","Community","getDefault","fromNotaryGroupToml","setDefault","txs","playTransactions","sig","getSignature","respTip","CID","Buffer","getNewTip_asU8","treeId","waitForCommunityTip","count","doCheck","nextUpdate","cTip","setTimeout","equals","subDirectory","Go","setWasmPath","reducer","action","act","stopLoading","login","setDID","setUsername","logout","sessionStorage","removeItem","index","createContext","StoreProvider","children","firstRun","setFirstRun","useReducer","dispatch","getItem","userKey","fromBytes","usernameKey","doAsyncSet","privateKey","setItem","newState","Provider","Actions","usernameTimeout","password","loadingText","checkUsername","later","publicUserKey","Tupelo","ecdsaPubkeyToDid","publicKey","clearTimeout","loginFormType","loginText","passwordFormType","registering","loggingIn","isAvailable","UsernameField","iconLeft","PasswordField","LoginBottom","onLogin","setPassword","setError","handleSubmit","passPhraseKey","secureKey","ecdsaPubkeyToAddress","secureAddr","resolveResp","includes","RegisterBottom","passwordConfirm","setPasswordConfirm","insecureKey","secureKeyAddress","community","doRegister","LoginForm","redirect","doRedirect","Column","size","subtitle","ObjectCreator","content","imagePath","imageError","fileRef","useRef","setLoading","hasImage","fileBitsPromise","current","files","fReader","FileReader","file","onload","result","byteLength","onerror","e","readAsArrayBuffer","ephemeralP","communityP","treeP","addrP","userAddr","attrs","image","nftP","userP","changeHandler","marginTop","accept","ref","createNFT","NFTCard","onSend","sending","isDestErrored","attrsResp","loadNFT","Image","Content","Footer","padding","authResp","dids","didsWithoutSent","ObjectWallet","getObjects","cards","AddObjectForm","onAdd","addOpen","addDid","addLoading","handleAdd","nftTip","nftTree","namespace","userName","didFromUserName","userTip","webpackEmptyContext","req","code"],"mappings":"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","file":"static/js/main.1da8cd26.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.74ee5cb0.svg\";","import React, { useState } from 'react'\n\nimport { Modal, Form, Button, Media,Content, Loader } from 'react-bulma-components'\nimport { ChainTree, establishTokenTransaction } from 'tupelo-wasm-sdk'\nimport { txsWithCommunityWait } from '../util/appcommunity'\n\nexport function EstablishTokenDialog({ show, onClose, userTree }: { userTree: ChainTree, show: boolean, onClose: (() => void) }) {\n    const [state, setState] = useState({\n        loading: false,\n        tokenName: '',\n        maximum: 0,\n    })\n\n    const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n        setState({ ...state, [evt.target.name]: evt.target.value })\n    }\n\n    const handleSubmit = () => {\n        setState({...state, loading: true})\n        const doAsync = async ()=> {\n            await txsWithCommunityWait(userTree, [establishTokenTransaction(state.tokenName, state.maximum)])\n            setState({...state, loading: false, tokenName: '', maximum: 0})\n            onClose()\n        }\n        doAsync()\n    }\n\n    return (\n    <Modal show={show} onClose={onClose}>\n        <Modal.Card style={{backgroundColor: 'white'}}>\n        <Modal.Card.Head>\n            <Modal.Card.Title>\n                Establish Token\n            </Modal.Card.Title>\n        </Modal.Card.Head>\n        <Modal.Card.Body>\n            <Media>\n                {state.loading ?\n                <Loader />\n                :                \n                <Media.Item>\n                    <Content>\n                        <Form.Field>\n                            <Form.Label>Token Name</Form.Label>\n                            <Form.Control>\n                                <Form.Input value={state.tokenName} onChange={handleChange} name=\"tokenName\" placeholder=\"Token Name\" />\n                            </Form.Control>\n                        </Form.Field>\n                        <Form.Field>\n                            <Form.Label>Maximum Mint</Form.Label>\n                            <Form.Control>\n                                <Form.Input type=\"number\" value={state.maximum.toString()} onChange={handleChange} name=\"maximum\" placeholder=\"Maximum Mint\" />\n                            </Form.Control>\n                            <Form.Help>Leave as 0 to allow unlimited minting</Form.Help>\n                        </Form.Field>\n                        <Form.Field kind=\"group\">\n                            <Button color=\"primary\" onClick={handleSubmit}>Establish</Button>\n                            <Button text onClick={() => { onClose() }}>cancel</Button>\n                        </Form.Field>\n                    </Content>\n                </Media.Item>\n                }\n            </Media>\n        </Modal.Card.Body>\n        </Modal.Card>\n    </Modal>\n)\n}\n\n","import React, { useState, useContext } from 'react'\n\nimport { Modal, Form, Button, Media,Content, Loader } from 'react-bulma-components'\nimport { ChainTree, receiveTokenTransactionFromPayload, EcdsaKey, sendTokenTransaction, setOwnershipTransaction } from 'tupelo-wasm-sdk'\nimport { getAppCommunity, txsWithCommunityWait } from '../util/appcommunity'\nimport { getUserTree } from '../util/usernames'\nimport { StoreContext, IAppMessage, AppActions } from '../state/store'\n\nconst tokenPath = \"/tree/_tupelo/tokens\";\n\n//TODO(bug): if you let the browser autofill a field it doesn't trigger change and so it doesn't update the state\n// so you end up with null names\n\nexport function SendTokenDialog({ show, onClose, userTree, tokens }: { tokens: Object, userTree: ChainTree, show: boolean, onClose: (() => void) }) {\n    const [,globalDispatch] = useContext(StoreContext)\n    \n    const initialState = {\n        loading: false,\n        tokenName: '',\n        destination: '',\n        amount: '',\n        destinationError: '',\n        amountError: '',\n    }\n\n    const [state, setState] = useState(initialState)\n\n    const isDestinationErrored = ()=> {\n        return state.destinationError !== ''\n    }\n\n    const isAmountErrored = ()=> {\n        return state.amountError !== ''\n    }\n\n    const handleChange = (evt: React.ChangeEvent<HTMLInputElement|HTMLSelectElement>) => {\n        setState({ ...state, [evt.target.name]: evt.target.value })\n    }\n\n    const handleSubmit = () => {\n        setState({...state, loading: true, destinationError: '', amountError: ''})\n        const doAsync = async ()=> {\n            console.log(\"sending: \", state)\n            /*\n                get destination chain,\n                create a new ephemeral chaintree\n                chown owner to both self and destination\n                sendCoin from user tree\n                receiveCoin on new chaintree\n            */\n            const c = await getAppCommunity()\n\n            const balanceResp = await userTree.resolve(tokenPath + '/' + state.tokenName)\n            const balance = balanceResp.value['balance'] as number\n\n            if (parseInt(state.amount,10) > balance) {\n                setState((s)=> {\n                    return {...s, amountError: \"That's too much. You don't have that\", loading: false}   \n                })\n                return\n            }\n            \n            let destTree\n            try {\n                destTree = await getUserTree(state.destination)\n            } catch(e) {\n                if (e === 'not found') {\n                    setState((s)=> {\n                        return {...s, destinationError: 'User not found', loading: false}   \n                    })\n                    return\n                }\n                throw e\n            }\n            const ephemeralKey = await EcdsaKey.generate()\n            const ephemeralTree = await ChainTree.newEmptyTree(c.blockservice, ephemeralKey)\n\n            const userDid = await userTree.id()\n            const destDid = await destTree.id()\n            const ephemeralDid = await ephemeralTree.id()\n\n            if (userDid === null || destDid === null || ephemeralDid === null) {\n                throw new Error(\"error getting userdid, destdid or ephemeralDID\")\n            }\n\n            console.log(\"ephemeralDID: \", ephemeralDid)\n            const userAuthResp = await userTree.resolve(\"tree/_tupelo/authentications\")\n            const destAuthResp = await destTree.resolve(\"tree/_tupelo/authentications\")\n\n            const sendId = userDid + \"->\" + destDid + Math.random().toString()\n\n            console.log(\"sending token to ephemeral\")\n            const sendTx = sendTokenTransaction(\n                sendId,\n                state.tokenName,\n                parseInt(state.amount, 10),\n                ephemeralDid,\n            )\n            console.log(\"send tx: \", sendTx.toObject())\n            const payload = await c.sendTokenAndGetPayload(userTree, sendTx)\n\n            console.log(\"receiving on ephemeral, payload: \", payload.toObject())\n            let receiveTx = receiveTokenTransactionFromPayload(payload)\n\n            console.log(\"receiveTx: \", receiveTx.toObject())\n            await txsWithCommunityWait(ephemeralTree, [\n                setOwnershipTransaction(userAuthResp.value.concat(destAuthResp.value)),\n                receiveTx,\n            ])\n            console.log('done')\n            \n            setState(initialState)\n            onClose()\n            globalDispatch({\n                type: AppActions.message,\n                message: {\n                    title: \"Sent \" + state.amount + \" token to user: \" + state.destination,\n                    body: \"Ask \" + state.destination + \" to use this DID in their receive token: \\n\" + ephemeralDid, \n                }\n            } as IAppMessage)\n        }\n        doAsync()\n    }\n\n    const tokenOptions = Object.keys(tokens).map((tokenName) => {\n        return <option key={tokenName} value={tokenName}>{tokenName}</option>\n    })\n\n    return (\n    <Modal show={show} onClose={onClose}>\n        <Modal.Card style={{backgroundColor: 'white'}}>\n        <Modal.Card.Head>\n            <Modal.Card.Title>\n                Send Token\n            </Modal.Card.Title>\n        </Modal.Card.Head>\n        <Modal.Card.Body>\n            <Media>\n                {state.loading ?\n                <Loader />\n                :                \n                <Media.Item>\n                    <Content>\n                        <Form.Field>\n                            <Form.Label>Token Name</Form.Label>\n                            <Form.Control>\n                                <Form.Select onChange={handleChange} value={state.tokenName} name=\"tokenName\">\n                                    <option value=\"\"></option>\n                                    {tokenOptions}\n                                </Form.Select>\n                            </Form.Control>\n                        </Form.Field>\n                        <Form.Field>\n                            <Form.Label>Destination</Form.Label>\n                            <Form.Control>\n                                <Form.Input color={ isDestinationErrored() ? \"danger\" : \"info\" } value={state.destination} onChange={handleChange} name=\"destination\" placeholder=\"Where to send\" />\n                            </Form.Control>\n                            {isDestinationErrored() && <Form.Help color=\"danger\">{state.destinationError}</Form.Help>}\n\n                        </Form.Field>\n                        <Form.Field>\n                            <Form.Label>Amount</Form.Label>\n                            <Form.Control>\n                                <Form.Input color={ isAmountErrored() ? \"danger\" : \"info\" } type=\"number\" value={state.amount} onChange={handleChange} name=\"amount\" placeholder=\"Amount to send\" />\n                            </Form.Control>\n                            {isAmountErrored() && <Form.Help color=\"danger\">{state.amountError}</Form.Help>}\n                        </Form.Field>\n                        <Form.Field kind=\"group\">\n                            <Button color=\"primary\" onClick={handleSubmit}>Send</Button>\n                            <Button text onClick={() => { onClose() }}>cancel</Button>\n                        </Form.Field>\n                    </Content>\n                </Media.Item>\n                }\n            </Media>\n        </Modal.Card.Body>\n        </Modal.Card>\n    </Modal>\n)\n}\n\n","import React, { useState } from 'react'\n\nimport { Modal, Form, Button, Media,Content, Loader } from 'react-bulma-components'\nimport { ChainTree, mintTokenTransaction } from 'tupelo-wasm-sdk'\nimport { txsWithCommunityWait } from '../util/appcommunity'\n\n//TODO: this would be nice with error handling to show you you're trying to mint more than the allowed\n\nexport function MintTokenDialog({ show, onClose, userTree, tokens }: { tokens: Object, userTree: ChainTree, show: boolean, onClose: (() => void) }) {\n    const [state, setState] = useState({\n        loading: false,\n        tokenName: '',\n        amount: 0,\n    })\n\n    const handleChange = (evt: React.ChangeEvent<HTMLInputElement|HTMLSelectElement>) => {\n        setState({ ...state, [evt.target.name]: evt.target.value })\n    }\n\n    const handleSubmit = () => {\n        setState({...state, loading: true})\n        const doAsync = async ()=> {\n            await txsWithCommunityWait(userTree, [mintTokenTransaction(state.tokenName, state.amount)])\n            setState({...state, loading: false, tokenName: '', amount: 0})\n            onClose()\n        }\n        doAsync()\n    }\n\n    const tokenOptions = Object.keys(tokens).map((tokenName) => {\n        return <option key={tokenName} value={tokenName}>{tokenName}</option>\n    })\n\n    return (\n    <Modal show={show} onClose={onClose}>\n        <Modal.Card style={{backgroundColor: 'white'}}>\n        <Modal.Card.Head>\n            <Modal.Card.Title>\n                Mint Token\n            </Modal.Card.Title>\n        </Modal.Card.Head>\n        <Modal.Card.Body>\n            <Media>\n                {state.loading ?\n                <Loader />\n                :                \n                <Media.Item>\n                    <Content>\n                        <Form.Field>\n                            <Form.Label>Token Name</Form.Label>\n                            <Form.Control>\n                                <Form.Select onChange={handleChange} value={state.tokenName} name=\"tokenName\">\n                                    <option value=\"\"></option>\n                                    {tokenOptions}\n                                </Form.Select>\n                            </Form.Control>\n                        </Form.Field>\n                        <Form.Field>\n                            <Form.Label>Amount</Form.Label>\n                            <Form.Control>\n                                <Form.Input type=\"number\" value={state.amount.toString()} onChange={handleChange} name=\"amount\" placeholder=\"Amount to Mint\" />\n                            </Form.Control>\n                        </Form.Field>\n                        <Form.Field kind=\"group\">\n                            <Button color=\"primary\" onClick={handleSubmit}>Mint</Button>\n                            <Button text onClick={() => { onClose() }}>cancel</Button>\n                        </Form.Field>\n                    </Content>\n                </Media.Item>\n                }\n            </Media>\n        </Modal.Card.Body>\n        </Modal.Card>\n    </Modal>\n)\n}\n\n","import debug from 'debug'\n\nconst log = debug(\"util:syncher\")\n\ninterface queuedFunction {\n    fn:Function\n    res:Function\n    rej:Function\n}\n\n/**\n * SimpleActor is used to serialize function calls, it is a single threaded\n * actor that does one function after the next. Every send returns a promise\n * that is executed after the serialization\n */\nexport class SimpleSyncher {\n    private queue:queuedFunction[]\n    private started:boolean\n    private name?:string\n    constructor(name?:string) {\n        this.started = false\n        this.queue = []\n        this.name = name\n    }\n\n    private async run() {\n        const queuedFn = this.queue.pop()\n        if (queuedFn === undefined) {\n            log(this.name, ' stopping syncher')\n            this.started = false\n            return\n        }\n        try {\n            log(this.name, ' run fn', queuedFn.fn.toString())\n            const resp = await queuedFn.fn()\n            log(this.name, ' finish fn')\n            queuedFn.res(resp)\n        } catch(err) {\n            log(this.name, ' rejecting: ', err)\n            queuedFn.rej(err)\n        }\n        if (this.queue.length > 0) {\n            log(this.name, \"syncher queueing another\")\n            this.run()\n        } else {\n            this.started = false\n        }\n    }\n\n    send(fn:Function) {\n        const p = new Promise((resolve,reject) => {\n            this.queue.push({\n                fn:fn,\n                res: resolve,\n                rej:reject,\n            })\n            if (!this.started) {\n                log(this.name, \" not started, starting\")\n                this.started = true\n                this.run()\n                return\n            }\n            log(this.name, ' run already started')\n        })\n       \n        return p\n    }\n}","import React, { useState } from 'react'\n\nimport { Modal, Form, Button, Media, Content, Loader } from 'react-bulma-components'\nimport { ChainTree, receiveTokenTransactionFromPayload, sendTokenTransaction } from 'tupelo-wasm-sdk'\nimport { getAppCommunity, txsWithCommunityWait } from '../util/appcommunity'\nimport { SimpleSyncher } from '../util/syncher'\nimport { TokenPayload } from 'tupelo-messages'\n\n\nconst tokenPath = \"/tree/_tupelo/tokens\";\n\n//TODO: this would be nice with error handling, etc\n\nexport function ReceiveTokenDialog({ show, onClose, userTree }: { userTree: ChainTree, show: boolean, onClose: (() => void) }) {\n\n    const [state, setState] = useState({\n        loading: false,\n        did: '',\n    })\n\n    const handleChange = (evt: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n        setState({ ...state, [evt.target.name]: evt.target.value })\n    }\n\n    const handleSubmit = () => {\n        setState({ ...state, loading: true })\n        const doAsync = async () => {\n            const c = await getAppCommunity()\n\n            const userDid = await userTree.id()\n            if (userDid === null) {\n                throw new Error(\"user tree had null id\")\n            }\n            const tip = await c.getTip(state.did)\n            const tree = new ChainTree({\n                store: c.blockservice,\n                tip: tip,\n                key: userTree.key,\n            })\n            const tokensResp = await tree.resolve(tokenPath)\n            const tokens = await Promise.all(Object.keys(tokensResp.value || {}).map(async (key) => {\n                const tResp = await tree.resolve(tokenPath + \"/\" + key)\n                return {\n                    name: key,\n                    balance: tResp.value['balance'],\n                }\n            }));\n\n            const syncher = new SimpleSyncher()\n            const sendPayloads = await Promise.all(tokens.map((token) => {\n                return syncher.send(() => {\n                    return c.sendTokenAndGetPayload(tree, sendTokenTransaction(\"uuid\" + Math.random().toString(), token.name, token.balance, userDid))\n                })\n            })) as TokenPayload[]\n            const rxTransactions = sendPayloads.map((payload) => {\n                return receiveTokenTransactionFromPayload(payload)\n            })\n            await txsWithCommunityWait(userTree, rxTransactions)\n            setState((s) => {\n                return { ...s, loading: false, did: '' }\n            })\n            onClose()\n        }\n        doAsync()\n    }\n\n    return (\n        <Modal show={show} onClose={onClose}>\n            <Modal.Card style={{ backgroundColor: 'white' }}>\n                <Modal.Card.Head>\n                    <Modal.Card.Title>\n                        Receive Token\n            </Modal.Card.Title>\n                </Modal.Card.Head>\n                <Modal.Card.Body>\n                    <Media>\n                        {state.loading ?\n                            <Loader />\n                            :\n                            <Media.Item>\n                                <Content>\n                                    <Form.Field>\n                                        <Form.Label>DID</Form.Label>\n                                        <Form.Control>\n                                            <Form.Input value={state.did} onChange={handleChange} name=\"did\" placeholder=\"DID of tokens\" />\n                                        </Form.Control>\n                                        <Form.Help>\n                                            This is the code that begins with 'did:tupelo:' that the sender has from the wallet.å\n                            </Form.Help>\n                                    </Form.Field>\n                                    <Form.Field kind=\"group\">\n                                        <Button color=\"primary\" onClick={handleSubmit}>Receive</Button>\n                                        <Button text onClick={() => { onClose() }}>cancel</Button>\n                                    </Form.Field>\n                                </Content>\n                            </Media.Item>\n                        }\n                    </Media>\n                </Modal.Card.Body>\n            </Modal.Card>\n        </Modal>\n    )\n}\n\n","import React, { useContext, useState, useEffect } from 'react'\nimport { StoreContext } from '../state/store'\nimport { Redirect, RouteProps } from 'react-router'\nimport { Table, Loader, Button, Level } from 'react-bulma-components'\nimport { EstablishTokenDialog } from './establishtoken';\nimport { SendTokenDialog } from './sendtoken';\nimport { ChainTree } from 'tupelo-wasm-sdk'\nimport { MintTokenDialog } from './minttoken';\nimport { ReceiveTokenDialog } from './receivetoken';\n\nconst tokenPath = \"/tree/_tupelo/tokens\";\n\nexport function TokenWallet(props: RouteProps) {\n    const [state, setState] = useState({\n        loading: true,\n        tokens: {},\n        showEstablishModal: false,\n        showMintModal: false,\n        showSendModal: false,\n        showReceiveModal: false,\n        modifiedAt: 0,\n    })\n\n    const [globalState] = useContext(StoreContext)\n\n    useEffect(() => {\n        const loadTokens = async () => {\n            if (globalState.userTree === undefined) {\n                throw new Error(\"user tree must be defined\")\n            }\n            let tokenResp: any\n            try {\n                tokenResp = await globalState.userTree.resolve(tokenPath)\n            } catch (e) {\n                console.error(\"e: \", e)\n                setState((s) => {\n                    return { ...s, tokens: {}, loading: false }\n                })\n            }\n\n            console.log(\"tokens resp: \", tokenResp)\n            setState((s) => {\n                return { ...s, tokens: (tokenResp.value || {}), loading: false }\n            })\n        }\n\n        console.log(\"loading tokens\")\n        loadTokens()\n        \n    }, [globalState.userTree, state.modifiedAt])\n\n    if (!globalState.userTree) {\n        return (\n            <Redirect to={{\n                pathname: \"/login\",\n                state: { from: props.location },\n            }} />\n        )\n    }\n\n    if (state.loading) {\n        return <Loader />\n    }\n\n    const tokenRows = Object.keys(state.tokens).map((tokenName) => {\n        if (globalState.userTree === undefined) {\n            throw new Error(\"undefined user tree!\")\n        }\n        return <TokenRow key={tokenName} modifiedAt={state.modifiedAt} tree={globalState.userTree} tokenName={tokenName} />\n    })\n\n    const handleCloseModal = ()=> {\n        console.log(\"setting modifiedAt\")\n        setState((s) => {return {...s, modifiedAt: Date.now()}})\n    }\n\n    return (\n        <div>\n            <EstablishTokenDialog userTree={globalState.userTree} show={state.showEstablishModal} onClose={() => { handleCloseModal(); setState({ ...state, showEstablishModal: false }) }} />\n            <MintTokenDialog tokens={state.tokens} userTree={globalState.userTree} show={state.showMintModal} onClose={() => { handleCloseModal(); setState({ ...state, showMintModal: false }) }} />\n            <SendTokenDialog tokens={state.tokens} userTree={globalState.userTree} show={state.showSendModal} onClose={() => { handleCloseModal(); setState({ ...state, showSendModal: false }) }} />\n            <ReceiveTokenDialog userTree={globalState.userTree} show={state.showReceiveModal} onClose={() => { handleCloseModal(); setState({ ...state, showReceiveModal: false }) }} />\n            <Level>\n                <Level.Side align=\"left\">\n                    <Level.Item>\n                        <Button onClick={() => { setState({ ...state, showSendModal: true }) }}>Send Token</Button>\n                    </Level.Item>\n                    <Level.Item>\n                        <Button onClick={() => { setState({ ...state, showReceiveModal: true }) }}>Receive Token</Button>\n                    </Level.Item>\n                </Level.Side>\n            </Level>\n            <Table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Balance</th>\n                        <th>Max</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tokenRows}\n                </tbody>\n            </Table>\n            <Level>\n                <Level.Side align=\"left\">\n                    <Level.Item>\n                        <Button onClick={() => { setState({ ...state, showEstablishModal: true }) }}>Establish Token</Button>\n                    </Level.Item>\n                    <Level.Item>\n                        <Button onClick={() => { setState({ ...state, showMintModal: true }) }}>Mint Token</Button>\n                    </Level.Item>\n                </Level.Side>\n            </Level>\n        </div>\n    )\n}\n\nexport const TokenRow = ({ tree, tokenName, modifiedAt }: { modifiedAt: number, tree: ChainTree, tokenName: string }) => {\n    const [state, setState] = useState({\n        balance: 0,\n        max: null,\n        loading: true,\n    })\n\n    useEffect(() => {\n        const loadInfo = async () => {\n            const tokenInfoPath = tokenPath + \"/\" + tokenName\n            const tokenInfoResp = await tree.resolve(tokenInfoPath)\n            console.log(\"tokenInfoResp \", tokenInfoPath, tokenInfoResp)\n            if (tokenInfoResp.value.monetaryPolicy) {\n                const monetaryPolicy = await tree.resolve(tokenInfoPath + \"/monetaryPolicy\")\n                setState((s) => { return { ...s, max: monetaryPolicy.value['maximum'] } })\n            }\n\n            setState((s) => {\n                return { ...s, balance: tokenInfoResp.value['balance'], loading: false }\n            })\n        }\n        console.log(\"loading tokenRow\")\n        loadInfo()\n    }, [tree, tokenName, modifiedAt])\n\n    return (\n        <tr>\n            <td>\n                {tokenName}\n            </td>\n            <td>\n                {state.loading ? <Loader /> : state.balance}\n            </td>\n            <td>\n                {state.loading ? <Loader /> : state.max}\n            </td>\n        </tr>\n    )\n}","import React, { useContext, useState, useEffect } from 'react';\nimport { Redirect, RouteProps } from 'react-router';\nimport { Form, Box, Table, Button, Loader } from 'react-bulma-components';\nimport { ChainTree, setDataTransaction } from 'tupelo-wasm-sdk';\nimport { txsWithCommunityWait } from '../util/appcommunity';\nimport { StoreContext } from 'state/store';\n\nexport const tnsPath = \"/_tns\";\n\nexport function TupeloNamingService(props: RouteProps) {\n    const [state, setState] = useState({\n        loading: true,\n        entries: {},\n        modifiedAt: 0,\n    })\n\n    const [globalState] = useContext(StoreContext)\n\n    useEffect(() => {\n        const loadEntries = async () => {\n            if (globalState.userTree === undefined) {\n                throw new Error(\"user tree must be defined\")\n            }\n\n            let entriesResp: any\n            try {\n                entriesResp = await globalState.userTree.resolveData(tnsPath)\n            } catch (e) {\n                console.error(\"e: \", e)\n                setState((s) => {\n                    return { ...s, entries: {}, loading: false }\n                })\n            }\n\n            console.log(\"entries resp: \", entriesResp)\n            setState((s) => {\n                return { ...s, entries: (entriesResp.value || {}), loading: false }\n            })\n        }\n\n        console.log(\"loading TNS entries\")\n        loadEntries()\n\n    }, [globalState.userTree, state.modifiedAt])\n\n    if (!globalState.userTree) {\n        return (\n            <Redirect to={{\n                pathname: \"/login\",\n                state: { from: props.location },\n            }} />\n        )\n    }\n\n    if (state.loading) {\n        return <Loader />\n    }\n\n    const entryRows = Object.keys(state.entries).map((entryName) => {\n        if (globalState.userTree === undefined) {\n            throw new Error(\"user tree must be defined\")\n        }\n\n        return <EntryRow key={entryName} modifiedAt={state.modifiedAt} tree={globalState.userTree} entryName={entryName} />\n    })\n\n    return (\n        <div>\n            <SetEntry userTree={globalState.userTree} entryChanged={() => setState({ ...state, modifiedAt: Date.now() })} />\n            <Table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Value</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {entryRows}\n                </tbody>\n            </Table>\n        </div>\n    )\n}\n\nexport const EntryRow = ({ tree, entryName, modifiedAt }: { modifiedAt: number, tree: ChainTree, entryName: string }) => {\n    const [state, setState] = useState({\n        name: \"\",\n        pointer: \"\",\n        loading: true,\n    })\n\n    useEffect(() => {\n        const loadInfo = async () => {\n            const entryInfoPath = tnsPath + \"/\" + entryName\n            const entryInfoResp = await tree.resolveData(entryInfoPath)\n            console.log(\"entryInfoResp: \", entryInfoPath, entryInfoResp)\n            setState((s) => {\n                return { ...s, name: entryName, pointer: entryInfoResp.value, loading: false}\n            })\n        }\n\n        console.log(\"loading entryRow\")\n        loadInfo()\n    }, [tree, entryName, modifiedAt])\n\n    return (\n        <tr>\n            <td>\n                {entryName}\n            </td>\n            <td>\n                {state.loading ? <Loader /> : state.pointer}\n            </td>\n        </tr>\n    )\n}\n\nconst entryNameToPath = (entryName: string) => {\n    return entryName.replace('.', '/')\n}\n\nexport const SetEntry = ({ userTree, entryChanged }: { userTree: ChainTree, entryChanged: Function }) => {\n    const [state, setState] = useState({\n        loading: false,\n        entryName: '',\n        pointer: '',\n    })\n\n    const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n        setState({ ...state, [evt.target.name]: evt.target.value })\n    }\n\n    const handleSubmit = () => {\n        setState({...state, loading: true})\n        const doAsync = async () => {\n            const entryPath = entryNameToPath(state.entryName)\n            await txsWithCommunityWait(userTree, [\n                setDataTransaction(tnsPath + \"/\" + entryPath, state.pointer)\n            ])\n            setState({ ...state, loading: false, entryName: '', pointer: '' })\n            entryChanged()\n        }\n        doAsync()\n    }\n\n    return (\n        <Box>\n            <Form.Field>\n                <Form.Label>Name</Form.Label>\n                <Form.Control>\n                    <Form.Input value={state.entryName} onChange={handleChange} name=\"entryName\" placeholder=\"Name\" />\n                </Form.Control>\n            </Form.Field>\n            <Form.Field>\n                <Form.Label>Value</Form.Label>\n                <Form.Control>\n                    <Form.Input value={state.pointer} onChange={handleChange} name=\"pointer\" placeholder=\"Value\" />\n                </Form.Control>\n            </Form.Field>\n            <Form.Field kind=\"group\">\n                <Button color=\"primary\" onClick={handleSubmit}>Set</Button>\n            </Form.Field>\n        </Box>\n    )\n}","import React, { useContext, useState } from 'react';\nimport { StoreContext } from '../state/store';\nimport { Redirect, RouteProps } from 'react-router';\nimport { Tabs, Container } from 'react-bulma-components';\nimport { TokenWallet } from '../components/tokenwallet';\nimport { ObjectCreator } from '../components/creator';\nimport { ObjectWallet } from '../components/objectwallet';\nimport { TupeloNamingService } from '../components/tns';\n\nenum tabs {\n    tokens,\n    objects,\n    creator,\n    tns,\n}\ntype tabStrings = keyof typeof tabs;\n\nexport function Wallet(props: RouteProps) {\n\n    const [state, setState] = useState({\n        currentTab: tabs.tokens,\n    })\n    const [globalState] = useContext(StoreContext)\n\n    const clickHandler = (evt: any) => {\n        const tabStr: tabStrings = evt.target.innerText.toLowerCase()\n        setState({ ...state, currentTab: tabs[tabStr] })\n    }\n\n    const pageContent = (tab: tabs) => {\n        if (globalState.userTree === undefined) {\n            throw new Error(\"can't get page content without a usertree\")\n        }\n        switch (tab) {\n            case tabs.tokens:\n                return <TokenWallet />\n            case tabs.creator:\n                return <ObjectCreator userTree={globalState.userTree} />\n            case tabs.objects:\n                return <ObjectWallet />\n            case tabs.tns:\n                return <TupeloNamingService />\n            default:\n                throw new Error(\"unrecognized tab: \" + tab)\n        }\n    }\n\n    if (!globalState.userTree) {\n        return (\n            <Redirect to={{\n                pathname: \"/login\",\n                state: { from: props.location },\n            }} />\n        )\n    }\n\n    return (\n        <Container>\n            <Tabs type=\"boxed\">\n                <Tabs.Tab onClick={clickHandler} active={state.currentTab === tabs.tokens}>Tokens</Tabs.Tab>\n                <Tabs.Tab onClick={clickHandler} active={state.currentTab === tabs.objects}>Objects</Tabs.Tab>\n                <Tabs.Tab onClick={clickHandler} active={state.currentTab === tabs.creator}>Creator</Tabs.Tab>\n                <Tabs.Tab onClick={clickHandler} active={state.currentTab === tabs.tns}>TNS</Tabs.Tab>\n            </Tabs>\n            {pageContent(state.currentTab)}\n        </Container>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { Loader } from 'react-bulma-components';\nimport { getUserTree } from 'util/usernames';\nimport { ChainTree } from 'tupelo-wasm-sdk';\nimport { tnsPath } from './tns';\n\nexport function TNSRouter() {\n    const [state, setState] = useState({\n        username: \"\",\n        chaintreeDataPath: \"\",\n        tree: undefined as ChainTree | undefined,\n        target: \"\",\n    })\n\n    const walletHostname = process.env.REACT_APP_WALLET_DOMAIN || \"\"\n    console.log(`walletHostname: ${walletHostname}`)\n    const walletHostnameComponents = walletHostname.split('.').reverse()\n\n    useEffect(() => {\n        const getTreeForUsername = async () => {\n            // return early if we've already looked up our target\n            if (state.target !== \"\") {\n                return\n            }\n\n            // we reverse the hostname components b/c the hierarchy is easier to work with that way\n            const hostnameComponents = window.location.hostname.split('.').reverse()\n\n            console.log(`hostnameComponents: ${hostnameComponents}`)\n\n            let username: string\n            let chaintreeDataPath: string\n            let allMatch = true\n            walletHostnameComponents.forEach((c, i) => {\n                if (hostnameComponents[i] !== c) {\n                    allMatch = false\n                }\n            })\n            if (allMatch) {\n                // skip wallet hostname components\n                username = hostnameComponents[walletHostnameComponents.length]\n                chaintreeDataPath = hostnameComponents.slice(walletHostnameComponents.length + 1).reverse().join('/')\n            } else {\n                // TODO: Also support looking up a _tnslink TXT record for this?\n                // Assumes first two components are username (i.e. TLD and component just to the left of that)\n                // Everything else should be TNS pointers inside that user's chaintree.\n                username = hostnameComponents.slice(0, 2).reverse().join('.')\n                chaintreeDataPath = hostnameComponents.slice(2).reverse().join('/')\n            }\n\n            let userTree: ChainTree\n            try {\n                console.log(`getting tree for username ${username}`)\n                userTree = await getUserTree(username)\n                setState((s) => {\n                    return {\n                        ...s,\n                        username: username,\n                        chaintreeDataPath: chaintreeDataPath,\n                        tree: userTree\n                    }\n                })\n            } catch(e) {\n                // just ignore\n                return\n            }\n        }\n        getTreeForUsername()\n    })\n\n    useEffect(() => {\n        const getIPFSAddr = async (tree: ChainTree, dataPath: string) => {\n            if (dataPath === \"\") {\n                dataPath = '@'\n            }\n\n            console.log(`looking up TNS record at ${dataPath}`)\n\n            const pointer = await tree.resolveData(`${tnsPath}/${dataPath}`)\n\n            const target = `${process.env.REACT_APP_IPFS_GATEWAY}${pointer.value}`\n\n            setState((s) => {\n                console.log(`setting state.target to ${target}`)\n                return { ...s, target: target }\n            })\n        }\n\n        if (state.tree !== undefined && state.target === \"\") {\n            getIPFSAddr(state.tree, state.chaintreeDataPath)\n        }\n    }, [state.tree, state.chaintreeDataPath])\n\n    useEffect(() => {\n        const redirectToTarget = () => {\n            console.log(`Setting location to ${state.target}`)\n\n            window.location.href = state.target\n        }\n\n        if (state.target !== \"\") {\n            redirectToTarget()\n        }\n    }, [state.target])\n\n    return (\n        <div>\n            <h3>Welcome to the {walletHostname} Tupelo Naming Service gateway.</h3>\n            <p>Redirecting to {state.target === \"\" ? <span>... <Loader/></span> : state.target}</p>\n        </div>\n    )\n}","import React, { useContext } from 'react';\nimport { Message, Button, Container } from 'react-bulma-components';\nimport { StoreContext, IAppMessage, AppActions, IAppRemoveMessage } from '../state/store';\n\nexport function UserMessageList() {\n    const [globalState] = useContext(StoreContext)\n\n    const lis = globalState.messages.map((msg)=> {\n        return <MessageElement message={msg} />\n    })\n\n    return (\n        <Container>\n            <ol style={{ listStyleType: 'none' }}>\n                {lis}\n            </ol>\n        </Container>\n    )\n}\n\nconst MessageElement = ({ message }: { message: IAppMessage}) => {\n    const [,globalDispatch] = useContext(StoreContext)\n\n    if (message.id === undefined) {\n        throw new Error(\"a message must have an id when it's in the list\")\n    }\n\n    return (\n        <li key={message.id}>\n            <Message color=\"info\">\n                <Message.Header>\n                    {message.title}\n                <Button remove onClick={()=> { globalDispatch({type: AppActions.removeMessage, id: message.id} as IAppRemoveMessage) }}/>\n                </Message.Header>\n                <Message.Body style={{whiteSpace: 'pre'}}>\n                    {message.body}\n              </Message.Body>\n            </Message>\n        </li>\n    )\n}","import React, { useContext } from 'react';\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\nimport './App.scss';\nimport { Navbar, Container, Loader, Columns, Section } from 'react-bulma-components'\nimport { LoginForm } from './pages/login';\nimport { StoreProvider, StoreContext } from './state/store';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Wallet } from './pages/wallet';\nimport { TNSRouter } from './components/tnsrouter'\nimport { UserMessageList } from './components/messagelist'\n\nconst Routing = () => {\n  const [globalState] = useContext(StoreContext)\n\n  return (\n    globalState.loading > 0 ?\n      <Section>\n        <Columns className=\"is-desktop\">\n          <Loader style={{ height: 100, width: 100 }} />\n        </Columns>\n      </Section>\n      :\n      window.location.hostname === process.env.REACT_APP_WALLET_DOMAIN ?\n        <div>\n          <UserMessageList />\n          <Router>\n            <Switch>\n              <Route path=\"/login\">\n                <LoginForm />\n              </Route>\n              <Route path=\"/wallet\">\n                <Wallet />\n              </Route>\n              <Route>\n                <LoginForm />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n        :\n        <TNSRouter />\n  )\n}\n\nconst NavBar = () => {\n  const [globalState] = useContext(StoreContext)\n\n  return (\n    <Navbar transparent={false}>\n      <Navbar.Brand>\n        <img src={require(\"./logo.svg\")} alt=\"Tupelo\"/>\n      </Navbar.Brand>\n      <Navbar.Container position=\"end\">\n        {globalState && globalState.username && <p>Wallet of {globalState.username}</p>}\n      </Navbar.Container>\n    </Navbar>\n  )\n}\n\nconst App: React.FC = () => {\n\n  return (\n    <StoreProvider >\n      <Container>\n        <NavBar />\n      </Container>\n      <Container>\n        <Section>\n          <Routing />\n        </Section>\n      </Container>\n    </StoreProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst loc = window.location;\nif (loc.protocol !== 'https:') {\n    window.location.href = loc.href.replace('http://', 'https://');\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nimport { Community, ChainTree } from 'tupelo-wasm-sdk';\nimport CID from 'cids';\nimport debug from 'debug';\nimport { Transaction } from 'tupelo-messages';\n\nconst log = debug(\"appcommunity\")\n\nlet _appPromise: Promise<Community>\n\nconst devCommunity = `\nid = \"tupelolocal\"\nBootstrapAddresses = [\n    \"/ip4/127.0.0.1/tcp/34001/ipfs/16Uiu2HAm3TGSEKEjagcCojSJeaT5rypaeJMKejijvYSnAjviWwV5\",\n    \"/ip4/127.0.0.1/tcp/50000/ws/ipfs/16Uiu2HAm4hjC7zZTSN5KAp187vn52bZMsC8VaVdtrci7HD4aZcU7\",\n]\n[[signers]]\nVerKeyHex = \"0x15796b266a7d6b7c6b29c5bf97ad376fe8457e4d56bb0612ec8703c65ca7b6bb5dca004d55f5238d7764cd100c9e9cac3c5abce902bae8a5f9c29de716a145595b071b1b7038a48b4f6f88e7664b38c02062f64b3ceb499e4cbb82361457dcd731f5b48901871e7fd56a9c91ab3e06d3f7cb27288962686d9a05e02c1482f01f\"\nDestKeyHex = \"0x04f6dee3f7da1da58afd6ee58ea6b858fb67664fc6e2240bb6e3a75c0e1db9bbef5f413c8604bb864513d3cf27eca60b539b048b2a08f8799570c14dfb73f3f391\"\n\n[[signers]]\nVerKeyHex = \"0x7be8c92c8c295ef3e97be28f469f5f94d10ee7db4d202776bee5cf55c62d508a0c3550a19342d768ff073c0798ce003646df586ef588a9e9443a0ca86a234ed15150dc98ecc3f1071649fca03426f1c8c215a90752f51faa3e2e788e1dae2e9e5cf87c1ca4239a0949a0ba6ea09c061a538372cc4230dedafae929b170ad7704\"\nDestKeyHex = \"0x0438b196bddb9c3ec395b8ccb07bdab44ec768c084e7141b09ac5638d47fffbd5e7b7623f499a2e714e31464a356a0e30ad7c93045b6cd9957b45e957cc15dcb99\"\n\n[[signers]]\nVerKeyHex = \"0x88aefad94805db01cacaf190f47bc9e40f584b5085c651da168ac4034d570b4750bf7b23803d204e483e407a5ca34ee7f7a434733346451cf3f5d26c0d11e5ac45398a03fbba2d3b0dfc21cdf14615430cea394bd9423d8527eaa82a96aa6d20655724d99770ee3488b6537d6be143b84b21ad5ee12c190048757fe453313fd2\"\nDestKeyHex = \"0x0468924bd1341b5cec1fed888aaf1e3caa94e7d0f13d4f4573b01b296374b9e710a58a7b40e7161c0bcf7fd41832441ca21076f3846e854c8d8c640f2469a552b1\"\n`\n\nexport function getAppCommunity(): Promise<Community> {\n    log(\"getAppCommunity\")\n    if (_appPromise !== undefined) {\n        return _appPromise\n    }\n    _appPromise = new Promise(async (resolve, reject) => {\n        let c: Community\n        switch (process.env.NODE_ENV) {\n            case 'production':\n                log('using production community')\n                c = await Community.getDefault()\n                break;\n            default:\n                log('using development community')\n                c = await Community.fromNotaryGroupToml(devCommunity)\n                Community.setDefault(c)\n        }\n        resolve(c)\n    })\n    return _appPromise\n}\n\nexport async function txsWithCommunityWait(tree:ChainTree, txs:Transaction[]) {\n    const c = await getAppCommunity()\n    const res = await c.playTransactions(tree, txs)\n    const sig = res.getSignature()\n    if (sig === undefined) {\n        throw new Error(\"undefined sig from response\")\n    }\n    const respTip = new CID(Buffer.from(sig.getNewTip_asU8()))\n\n    const treeId = await tree.id()\n    if (treeId === null) {\n        throw new Error(\"error getting ID, was null\")\n    }\n\n    await waitForCommunityTip(treeId, respTip)\n    return res\n}\n\n\n// for some reason can't use CID as a type here easily\nexport function waitForCommunityTip(did:string, tip:CID) {\n    return new Promise((resolve,reject)=> {   \n        log(\"waiting for community on \", did) \n        let count = 0\n        const doCheck = async ()=> {\n            const c = await getAppCommunity()\n            log(\"waitForCommunityTip: awaitng nextUpdate\")\n            await c.nextUpdate()\n            log(\"waitForCommunityTip: getTip\")\n            let cTip:CID\n            try {\n                cTip = await c.getTip(did)\n            } catch(e) {\n                if (e === 'not found') {\n                    setTimeout(doCheck, 200)\n                    return\n                }\n                throw new Error(e)\n            }\n            if (tip.equals(cTip)) {\n                log(\"tips matched\", did) \n                resolve()\n                return\n            }\n            if (count > 60) {\n                log(\"waitForCommunityTip: rejecting timeout \", did)\n                reject(new Error(\"timeout error, over 30s\"))\n                return\n            }\n            count++\n            log('tips did not match, retrying', did)\n            setTimeout(doCheck, 500)\n        }\n        doCheck()\n    })\n}","import React, { createContext, useReducer, useEffect, useState } from \"react\";\nimport { ChainTree, EcdsaKey } from \"tupelo-wasm-sdk\";\nimport { getAppCommunity } from \"../util/appcommunity\";\nimport { usernameKey } from \"../util/usernames\";\n\ndeclare const Go: any;\n\nif (window) {\n  const subDirectory = window.location.pathname\n  console.log(\"subDirectory \", subDirectory)\n\n  if (subDirectory !== '/') {\n    console.log(\"setting wasmpath to: \", subDirectory + \"tupelo.wasm\")\n    Go.setWasmPath(subDirectory + \"tupelo.wasm\");\n  }\n}\n\ninterface IAppState {\n  userTree?: ChainTree\n  username?: string\n  userDid?: string\n  loading: number\n  messages: IAppMessage[]\n}\n\nexport interface IAppMessage {\n  id?: string\n  color?: string\n  title: string\n  body: string\n}\n\nexport enum AppActions {\n  loading,\n  stopLoading,\n  login,\n  setDID,\n  removeMessage,\n  message,\n  logout,\n  setUsername,\n}\n\nexport interface IAppAction {\n  type: AppActions\n}\n\nexport interface IAppLoading extends IAppAction {\n  type: AppActions.loading\n}\n\nexport interface IAppStopLoading extends IAppAction {\n  type: AppActions.stopLoading\n}\n\nexport interface IAppLogin extends IAppAction {\n  type: AppActions.login\n  userTree: ChainTree\n  username: string\n  did: string\n}\n\nexport interface IAppRemoveMessage extends IAppAction {\n  type: AppActions.removeMessage,\n  id: string\n}\n\nexport interface IAppMessage extends IAppAction {\n  type: AppActions.message,\n  message: IAppMessage,\n}\n\nexport interface IAppLogout extends IAppAction {\n  type: AppActions.logout\n}\n\ninterface IAppSetDid extends IAppAction {\n  type: AppActions.setDID\n  did: string\n}\n\ninterface IAppSetUsername extends IAppAction {\n  type: AppActions.setUsername\n  username: string\n}\n\nfunction reducer(state: IAppState, action: IAppAction) {\n  let act\n  switch (action.type) {\n    case AppActions.loading:\n      return { ...state, loading: state.loading + 1 }\n    case AppActions.stopLoading:\n      return { ...state, loading: state.loading - 1 }\n    case AppActions.login:\n      act = action as IAppLogin\n      return { ...state, userTree: act.userTree, username: act.username, did: act.did }\n    case AppActions.setDID:\n      return { ...state, userDid: (action as IAppSetDid).did }\n    case AppActions.setUsername:\n      return { ...state, username: (action as IAppSetUsername).username }\n    case AppActions.logout:\n      sessionStorage.removeItem('userDid')\n      sessionStorage.removeItem('userKey')\n      return {...initialState, loading: 0} \n    case AppActions.message:\n      const msg = (action as IAppMessage).message\n      msg.id = (new Date()).toString() + \"-\" + msg.title + Math.random().toString()\n      return { ...state, messages: [...state.messages, msg] }\n    case AppActions.removeMessage:\n      const id = (action as IAppRemoveMessage).id\n      let index = -1;\n      for (var i = state.messages.length - 1; i >= 0; i--) {\n        if (state.messages[i].id === id) {\n          index = i\n          break;\n        }\n      }\n      if (index === -1) {\n        return state // nothing to do here\n      }\n      return { ...state, messages: [...state.messages.slice(0, index), ...state.messages.slice(index + 1)] }\n    default:\n      throw new Error(\"unkown type: \" + action.type)\n  }\n}\n\nconst initialState = { loading: 1, messages: [] } as IAppState\n\nconst StoreContext = createContext([initialState, () => { }] as [IAppState, React.Dispatch<IAppAction>]);\n\nconst StoreProvider = ({ children }: { children: JSX.Element[] }) => {\n  const [firstRun, setFirstRun] = useState(true);\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // On every state set\n  useEffect(\n    () => {\n      if (firstRun) {\n        setFirstRun(false)\n\n        // go ahead and just get a community going\n        // it will make login/register faster\n        getAppCommunity()\n\n        const did = sessionStorage.getItem('userDid')\n        const userKey = sessionStorage.getItem('userKey')\n        const doAsyncSet = async () => {\n          if (!did || !userKey) {\n            throw new Error(\"no did or no userKey\")\n          }\n          const c = await getAppCommunity()\n          let tip\n          try {\n            tip = await c.getTip(did)\n          } catch(e) {\n            // in this case, the user had a set userDId, key, but\n            // the network didn't know about them, so let's just\n            // unset and let them login again\n            if (e === 'not found') {\n              dispatch({\n                type: AppActions.logout,\n              } as IAppLogout)\n              return\n            }\n            throw e\n          }\n          const key = await EcdsaKey.fromBytes(Buffer.from(userKey, 'base64'))\n\n          const tree = new ChainTree({\n            key: key,\n            tip: tip,\n            store: c.blockservice,\n          })\n\n          const username = (await tree.resolveData(usernameKey)).value\n          console.log('logging in from storage: ', username, ' did: ', did)\n\n          dispatch({\n            type: AppActions.login,\n            userTree: tree,\n            did: did,\n            username: username\n          } as IAppLogin)\n                    \n          dispatch({\n            type: AppActions.stopLoading,\n          } as IAppStopLoading)\n        }\n\n        if (did && userKey) {\n          doAsyncSet()\n        } else {\n          console.log('stopping loading')\n          dispatch({\n            type: AppActions.stopLoading\n          } as IAppStopLoading)\n        }\n      }\n\n      if (!state.userDid && state.userTree) {\n        // if we didn't yet assign the DID, do that\n        state.userTree.id().then((did) => {\n          dispatch({\n            type: AppActions.setDID,\n            did: did,\n          } as IAppSetDid)\n        })\n      }\n\n      if (state.userTree && state.userDid && state.userTree.key && state.userTree.key.privateKey) {\n        sessionStorage.setItem('userDid', state.userDid)\n        sessionStorage.setItem('userKey', Buffer.from(state.userTree.key.privateKey).toString('base64'))\n      }\n\n      console.log({ newState: state });\n    },\n    [state, firstRun]\n  );\n\n  // Render state, dispatch and special case actions\n  return (\n    <StoreContext.Provider value={[state, dispatch]}>\n      {children}\n    </StoreContext.Provider>\n  );\n};\n\nexport { StoreContext, StoreProvider };\n","import React, { useReducer, useState, useContext } from 'react';\nimport { Columns, Heading, Form, Icon, Loader, Button } from 'react-bulma-components';\nimport { getAppCommunity, txsWithCommunityWait } from '../util/appcommunity';\nimport { EcdsaKey, ChainTree, Tupelo, setOwnershipTransaction, setDataTransaction } from 'tupelo-wasm-sdk';\nimport { RouteProps, Redirect } from 'react-router';\nimport {StoreContext, AppActions, IAppLogin} from '../state/store'\nimport {publicUserKey, usernameKey} from '../util/usernames'\n\ninterface ILoginState {\n    loading: boolean\n    username: string\n    password: string\n    userTree?: ChainTree\n    loadingText: string\n}\n\nenum Actions {\n    loginFormType,\n    passwordFormType,\n    userTree,\n    registering,\n    loggingIn,\n}\n\ninterface ILoginActions {\n    type: Actions\n}\n\ninterface IUsernameType extends ILoginActions {\n    type: Actions.loginFormType\n    username: string\n    dispatch: Function\n}\n\ninterface IPasswordType extends ILoginActions {\n    type: Actions.passwordFormType\n    password: string\n}\n\ninterface IUserTree extends ILoginActions {\n    type: Actions.userTree\n    username: string\n    tree?: ChainTree\n    dispatch: Function\n}\n\nconst initialState = {\n    loading: false,\n    username: '',\n    password: '',\n    loadingText: '',\n}\n\n\nlet usernameTimeout: number | undefined;\n\n// debounced username checker\nconst checkUsername = (state: ILoginState, dispatch: Function) => {\n\n    const later = async () => {\n\n        // TODO: Should most of this be replaced by ../util/usernames:getUserTree ?\n\n        const c = await getAppCommunity()\n\n        const username = state.username\n        if (!username) {\n            return //nothing to do on an empty username\n        }\n        console.log(\"actually checking: \", username)\n        const key = await publicUserKey(username)\n        // Convert the key to a tupelo DID (ChainTree id)\n        const did = await Tupelo.ecdsaPubkeyToDid(key.publicKey)\n\n        let tip\n        let tree: ChainTree | undefined = undefined\n        try {\n            tip = await c.getTip(did)\n        } catch (e) {\n            if (e === \"not found\") {\n                // do nothing, let tip be null\n            }\n        }\n        if (tip !== undefined) {\n            tree = new ChainTree({\n                store: c.blockservice,\n                tip: tip,\n            })\n        }\n\n        dispatch({\n            type: Actions.userTree,\n            username: username,\n            tree: tree,\n            dispatch: dispatch,\n        } as IUserTree)\n\n        usernameTimeout = undefined;\n    };\n\n    clearTimeout(usernameTimeout);\n    usernameTimeout = setTimeout(later, 150) as any; // nodejs and browser have differing types for the timeout return\n}\n\nfunction reducer(state: ILoginState, action: ILoginActions) {\n    switch (action.type) {\n        case Actions.loginFormType:\n            const username = (action as IUsernameType).username\n            checkUsername(state, (action as IUsernameType).dispatch)\n            return { ...state, loading: true, loginText: 'Checking for username availability', username: username }\n        case Actions.userTree:\n            const act = action as IUserTree\n            console.log(\"user tree received: \", act.username, \" state: \", state.username)\n            if (act.username !== state.username) {\n                // this means we missed one\n                checkUsername(state, act.dispatch)\n                return state // don't update anything yet\n            }\n            return { ...state, loading: false, loadingText: '', userTree: (action as IUserTree).tree }\n        case Actions.passwordFormType:\n            return { ...state, password: (action as IPasswordType).password }\n        case Actions.registering:\n            return { ...state, loading: true, loadingText: 'Registering your user' }\n        case Actions.loggingIn:\n            return { ...state, loading: true, loadingText: 'Logging in' }\n        default:\n            throw new Error(\"unkown type: \" + action.type)\n    }\n}\n\nconst isAvailable = (state: ILoginState) => {\n    return !state.loading && state.username && !state.userTree\n}\n\n// colors: '\"link\" | \"success\" | \"primary\" | \"info\" | \"warning\" | \"danger\" | \"light\" | \"dark\" | \"white\" | \"black\" |\n\nfunction UsernameField({ state, onChange }: { state: ILoginState, onChange: React.ChangeEventHandler }) {\n    return (\n        <Form.Field>\n            <Form.Label>Username</Form.Label>\n            <Form.Control iconLeft>\n                <Form.Input color={isAvailable(state) ? \"success\" : \"info\"} type=\"text\" placeholder=\"Username\" value={state.username} onChange={onChange} />\n                {state.loading ?\n                    <Icon align=\"left\"><span className=\"fas fa-spinner fa-pulse\" /></Icon>\n                    :\n                    <Icon align=\"left\"><span className=\"fas fa-user\" /></Icon>\n                }\n            </Form.Control>\n            {isAvailable(state) && <Form.Help color=\"success\">This username is available</Form.Help>}\n        </Form.Field>\n    )\n}\n\nfunction PasswordField({ name, value, onChange, error }: { name: string, value: string, error: string, onChange: React.ChangeEventHandler }) {\n    return (\n        <Form.Field>\n            <Form.Label>{name}</Form.Label>\n            <Form.Control iconLeft>\n                <Form.Input className={error ? \"animated pulse faster\" : \"\"} color={error ? \"danger\" : \"info\"} type=\"password\" placeholder=\"Password\" value={value} onChange={onChange} />\n                <Icon align=\"left\"><span className=\"fas fa-key\" /></Icon>\n            </Form.Control>\n            {error && <Form.Help color=\"danger\">{error}</Form.Help>}\n        </Form.Field>\n    )\n}\n\n// the elements at the bottom of a login form\nfunction LoginBottom({ state, dispatch, onLogin }: { state: ILoginState, dispatch: Function, onLogin:Function }) {\n    const [password, setPassword] = useState('')\n    const [error, setError] = useState('')\n\n    const handleSubmit = async () => {\n        if (state.userTree === undefined) {\n            throw new Error(\"must have a user tree to login\")\n        }\n\n        const tree = state.userTree\n        const username = state.username\n\n        let secureKey = await EcdsaKey.passPhraseKey(Buffer.from(password), Buffer.from(username))\n        let secureAddr = await Tupelo.ecdsaPubkeyToAddress(secureKey.publicKey)\n        let resolveResp = await tree.resolve(\"tree/_tupelo/authentications\")\n        let auths: string[] = resolveResp.value\n        if (auths.includes(secureAddr)) {\n            tree.key = secureKey\n            onLogin(state.userTree)\n        } else {\n            setError(\"invalid password\")\n        }\n    }\n\n    return (\n        <div>\n            <PasswordField error={error} name=\"Password\" value={password} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setError(''); setPassword(evt.target.value) }} />\n            <Button onClick={handleSubmit}>Login</Button>\n        </div>\n    )\n}\n\n// the elements at the bottom of a login form\nfunction RegisterBottom({ state, dispatch, onLogin }: { state: ILoginState, dispatch: Function, onLogin:Function }) {\n    const [password, setPassword] = useState('')\n    const [passwordConfirm, setPasswordConfirm] = useState('')\n    const [error, setError] = useState('')\n\n    const isConfirmed = () => {\n        return password === passwordConfirm\n    }\n\n    const handleSubmit = () => {\n        if (!isConfirmed()) {\n            setError('Passwords do not match')\n            return // do nothing here\n        }\n        dispatch({ type: Actions.registering })\n        const doRegister = async ()=> {\n            const username = state.username\n            const insecureKey = await publicUserKey(username)\n    \n            const secureKey = await EcdsaKey.passPhraseKey(Buffer.from(password), Buffer.from(username))\n            const secureKeyAddress = await Tupelo.ecdsaPubkeyToAddress(secureKey.publicKey)\n    \n            const community = await getAppCommunity()\n            const tree = await ChainTree.newEmptyTree(community.blockservice, insecureKey)\n    \n            console.log(\"playing transactions\")\n            await txsWithCommunityWait(tree, [\n                // Set the ownership of the chaintree to our secure key (thus owning the username)\n                setOwnershipTransaction([secureKeyAddress]),\n                // Cache the username inside of the chaintree for easier access later\n                setDataTransaction(usernameKey, username),\n            ])\n            tree.key = secureKey\n            onLogin(tree)\n        }\n        doRegister()\n    }\n\n    return (\n        <div>\n            <PasswordField error={error} name=\"Password\" value={password} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setError(''); setPassword(evt.target.value) }} />\n            <PasswordField error={error} name=\"Confirm Password\" value={passwordConfirm} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setError(''); setPasswordConfirm(evt.target.value) }} />\n            <Button onClick={handleSubmit}>Register</Button>\n        </div>\n    )\n}\n\nexport function LoginForm(props:RouteProps) {\n    const [state, dispatch] = useReducer(reducer, initialState)\n    const [redirect,doRedirect] = useState(false)\n\n    const [,globalDispatch] = useContext(StoreContext)\n\n    const handleUsernameChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch({ type: Actions.loginFormType, username: evt.target.value, dispatch: dispatch } as IUsernameType)\n    }\n\n    const onLogin = async (tree:ChainTree) => {\n        const did = await tree.id()\n        globalDispatch({\n            type: AppActions.login,\n            userTree: tree,\n            username: state.username,\n            did: did,\n        } as IAppLogin)\n        doRedirect(true)\n    }\n\n    let { from } = (props.location && props.location.state) ? props.location.state : { from: { pathname: \"/wallet\" } };\n\n    if (redirect) {\n        return (\n            <Redirect to={from}/>\n        )\n    }\n\n    return (\n        <div>\n            <Columns className=\"is-desktop\">\n                <Columns.Column size={\"half\"}>\n                    <Heading className=\"animated flipInX fast\">Hello.</Heading>\n                    <Heading subtitle>Find or create your wallet.</Heading>\n                </Columns.Column>\n            </Columns>\n\n            <Columns className=\"is-desktop\">\n                <Columns.Column size={\"half\"}>\n                    <UsernameField state={state} onChange={handleUsernameChange} />\n                    {state.loading && state.username && \n                        <div>\n                            <Loader style={{ width: 25, height: 25 }} />\n                            <p className=\"animated flipInX fast\">{state.loadingText}</p>\n                        </div>\n                    }\n                    {!state.loading && state.username && state.userTree && <LoginBottom state={state} dispatch={dispatch} onLogin={onLogin}/>}\n                    {!state.loading && state.username && !state.userTree && <RegisterBottom state={state} dispatch={dispatch} onLogin={onLogin} />}\n                </Columns.Column>\n            </Columns>\n        </div>\n    )\n}\n","import React, { useState, useRef } from 'react';\nimport { Form, Box, Button, Loader } from 'react-bulma-components';\nimport { Tupelo, ChainTree, EcdsaKey, setDataTransaction, setOwnershipTransaction } from 'tupelo-wasm-sdk';\nimport { getAppCommunity, txsWithCommunityWait } from '../util/appcommunity';\n\nexport interface INFTProperties {\n    title: string\n    subtitle: string\n    content: string\n    image?:Uint8Array\n}\n\nexport function ObjectCreator({userTree}:{userTree:ChainTree}) {\n    const initialState = {\n        title: \"\",\n        subtitle: \"\",\n        content: \"\",\n        imagePath: \"\",\n        imageError: \"\",\n    } as { [index: string]: string }\n\n    const hasImageError = () => {\n        return state.imageError !== ''\n    }\n\n    const fileRef = useRef<HTMLInputElement>(null)\n\n    const [state, setState] = useState(initialState)\n\n    const [loading,setLoading] = useState(false)\n\n    const hasImage = () => {\n        return state.imagePath !== ''\n    }\n\n    async function createNFT() {\n        const props = {...state}\n        if (userTree.key === undefined) {\n            throw new Error(\"undefined userTree key\")\n        }\n\n        let fileBitsPromise:Promise<ArrayBuffer>|undefined = undefined\n\n        if (hasImage()) {\n            if (fileRef.current === null || fileRef.current.files === null) {\n                throw new Error(\"undefined ref, even though imagePath set\")\n            }\n            const fReader = new FileReader()\n            const file = fileRef.current.files[0]\n\n            fileBitsPromise = new Promise((resolve,reject) => {\n                fReader.onload = () => {\n                    const result = fReader.result as ArrayBuffer\n                    if (result.byteLength > (1024 * 300)) {\n                        reject(\"Your image is too big, please limit to 300k\")\n                        return\n                    }\n                    resolve(result)\n                }\n                fReader.onerror = (e) => {\n                    reject(e)\n                }\n                fReader.readAsArrayBuffer(file)\n            })\n        }\n\n        // first we create an ephemeral key\n        const ephemeralP = EcdsaKey.generate()\n        const communityP = getAppCommunity()\n    \n        const [ephemeralKey,c] = await Promise.all([ephemeralP,communityP])\n        // then a new chaintree\n        const treeP = ChainTree.newEmptyTree(c.blockservice, ephemeralKey)\n        const addrP = Tupelo.ecdsaPubkeyToAddress(userTree.key.publicKey)\n        const [tree,userAddr] = await Promise.all([treeP, addrP])\n        const did = await tree.id()\n        if (did === null) {\n            throw new Error(\"unknown tree DID\")\n        }\n\n        const attrs = {\n            title: props.title,\n            subtitle: props.subtitle,\n            content: props.content,\n        } as {[index:string]:string|ArrayBuffer}\n\n        if (hasImage() && fileBitsPromise !== undefined) {\n            console.log(\"has image, getting the bits\")\n            try {\n                attrs.image = Buffer.from(await fileBitsPromise)    \n            } catch(e) {\n                setState((s) => {\n                    return {...s,imageError: e.toString()}\n                })\n                setLoading(false)\n                return\n            }\n        }\n\n        console.log(\"creating attrs: \", attrs)\n\n        // now we set the data and CHOWN to the user\n        const nftP = txsWithCommunityWait(tree, [\n            setDataTransaction(\"/_wallet/attributes\", attrs),\n            setOwnershipTransaction([userAddr]),\n        ])\n        \n        // and we keep a record of the NFT in the user tree\n        const userP = txsWithCommunityWait(userTree, [\n            setDataTransaction(\"/_wallet/nfts/\" + did, Date.now())\n        ])\n        await Promise.all([nftP, userP])\n        setState(initialState)\n        setLoading(false)\n    }\n\n    const changeHandler = (evt: React.ChangeEvent<HTMLInputElement>) => {\n        const target = evt.target\n        console.log(\"setting \", target.name, \" to \", target.value)\n        setState({...state,\n            [target.name]: target.value,\n        })\n    }\n\n    const submitHandler = ()=> {\n        setLoading(true)\n        createNFT()\n    }\n\n    return (\n        <div>\n            {loading ?\n            <Loader/> \n        :\n            <Box style={{ marginTop: '1em' }}>\n                <Form.Field>\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control>\n                        <Form.Input value={state.title} onChange={changeHandler} name=\"title\" placeholder=\"title\" />\n                    </Form.Control>\n                </Form.Field>\n                <Form.Field>\n                    <Form.Label>Subtitle</Form.Label>\n                    <Form.Control>\n                        <Form.Input value={state.subtitle} onChange={changeHandler} name=\"subtitle\" placeholder=\"subtitle\" />\n                    </Form.Control>\n                </Form.Field>\n                <Form.Field>\n                    <Form.Label>Content</Form.Label>\n                    <Form.Control>\n                        <Form.Input value={state.content} onChange={changeHandler} name=\"content\" placeholder=\"content\" />\n                    </Form.Control>\n                </Form.Field>\n\n                <Form.Field>\n                    <Form.Label>Image (optional)</Form.Label>\n                    <Form.Control>\n                        <input accept=\"image/*\" ref={fileRef} onChange={changeHandler} name=\"imagePath\" type=\"file\"/>\n                        {hasImageError() && <Form.Help color=\"danger\">{state.imageError}</Form.Help>}\n                    </Form.Control>\n                </Form.Field>\n                <Button onClick={submitHandler}>Create</Button>\n            </Box>}\n        </div>\n    )\n}","import React, { useContext, useState, useEffect } from 'react';\nimport { Box, Button, Form, Media, Card, Heading, Content, Loader, Columns } from 'react-bulma-components';\nimport { StoreContext, IAppMessage, AppActions } from '../state/store';\nimport { ChainTree, Tupelo, setOwnershipTransaction, setDataTransaction } from 'tupelo-wasm-sdk';\nimport { getAppCommunity, txsWithCommunityWait } from '../util/appcommunity';\nimport { INFTProperties } from './creator';\nimport { getUserTree } from '../util/usernames';\n\ntype DidList = { [index: string]: number }\n\ninterface IOnSendEvent {\n    did: string\n    tree: ChainTree\n    destination: string\n    dids: DidList\n}\n\nfunction NFTCard({ did, onSend, userTree }: { userTree:ChainTree, did: string, onSend: Function }) {\n    const [,globalDispatch] = useContext(StoreContext)\n    \n    const [state, setState] = useState({\n        loading: true,\n        tree: undefined as ChainTree | undefined,\n        attrs: {} as INFTProperties,\n        sending: false,\n        destination: \"\",\n        destinationError: '',\n    })\n\n    const isDestErrored = ()=> {\n        return state.destinationError !== ''\n    }\n\n    useEffect(() => {\n        const loadNFT = async () => {\n            const c = await getAppCommunity()\n            const tip = await c.getTip(did)\n            const tree = new ChainTree({\n                store: c.blockservice,\n                tip: tip,\n            })\n            const attrsResp = await tree.resolveData(\"/_wallet/attributes\")\n            console.log(attrsResp.value)\n            setState((s) => {\n                return { ...s, loading: false, tree: tree, attrs: (attrsResp.value || {}) }\n            })\n        }\n\n        loadNFT()\n    }, [did])\n\n    const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n        setState({ ...state, destination: evt.target.value })\n    }\n\n    const handleSend = () => {\n        setState({ ...state, loading: true, sending: false, destinationError: '' })\n\n        const doAsync = async ()=> {\n            if (state.tree === undefined) {\n                throw new Error(\"card must have a tree to send\")\n            }\n\n            let destTree\n            try {\n                destTree = await getUserTree(state.destination)\n            } catch(e) {\n                if (e === 'not found') {\n                    setState((s)=> {\n                        return {...s, loading: false, sending: true, destinationError: 'Unknown username'}\n                    })\n                    return\n                }\n                throw e\n            }\n            const authResp = await destTree.resolve(\"tree/_tupelo/authentications\")\n    \n            state.tree.key = userTree.key\n            console.log(\"reassigning \", did, \" to: \", state.destination)\n            // set the auth of this NFT to the same as the receiver\n            await txsWithCommunityWait(state.tree, [\n                setOwnershipTransaction(authResp.value)\n            ])\n    \n            console.log('remove did from nfts')\n            // remove this NFT from my bag of hodling\n            const dids = (await userTree.resolveData(\"/_wallet/nfts\")).value\n\n            const { [did]: value, ...didsWithoutSent } = dids\n            await txsWithCommunityWait(userTree, [\n                setDataTransaction(\"/_wallet/nfts\", didsWithoutSent)\n            ])\n            setState((s)=>{\n                return {...s, sending: false, loading: false, destinationError: ''}\n            })\n            globalDispatch({\n                type: AppActions.message,\n                message: {\n                    title: \"Sent an NFT to user: \" + state.destination,\n                    body: \"Ask \" + state.destination + \" to use this DID in their Add: \\n\" + did, \n                }\n            } as IAppMessage)\n            onSend({\n                did: did,\n                tree: state.tree,\n                destination: state.destination,\n                dids: didsWithoutSent,\n            } as IOnSendEvent)\n        }\n        doAsync()\n    }\n\n    return (\n        <Card>\n            {state.attrs.image ?\n            <Card.Image src={\"data:image/*;base64,\" + Buffer.from(state.attrs.image).toString('base64')} />\n            :\n            <Card.Header>\n                <Card.Header.Title>{state.attrs.title}</Card.Header.Title>\n            </Card.Header>\n            }\n           \n            <Card.Content>\n                {state.loading ?\n                    <Loader />\n                    :\n                    <div>\n                        <Media>\n                            <Media.Item>\n                                <Heading size={4}>\n                                    {state.attrs.title}\n                                </Heading>\n                                <Heading subtitle size={6}>\n                                    {state.attrs.subtitle}\n                                </Heading>\n                            </Media.Item>\n                        </Media>\n                        <Content>\n                            {state.attrs.content}\n                            <pre style={{marginTop:'1em'}}>{did}</pre>\n                        </Content>\n                    </div>}\n            </Card.Content>\n            <Card.Footer>\n                {!state.sending ?\n                    <Card.Footer.Item>\n                        <Button onClick={() => { setState({ ...state, sending: true }) }}>Send</Button>\n                    </Card.Footer.Item>\n                    :\n                    <Content style={{ padding: '1em' }}>\n                        <Form.Field>\n                            <Form.Label>Destination Name</Form.Label>\n                            <Form.Control>\n                                <Form.Input color={isDestErrored() ? 'danger' : 'info'} value={state.destination} onChange={handleChange} name=\"nftdestination\" placeholder=\"Destination\" />\n                            </Form.Control>\n                            {isDestErrored() && <Form.Help color=\"danger\">{state.destinationError}</Form.Help>}\n                        </Form.Field>\n                        <Form.Field kind=\"group\">\n                            <Button color=\"primary\" onClick={handleSend}>Send</Button>\n                            <Button text onClick={() => { setState({ ...state, sending: false, destination: \"\" }) }}>cancel</Button>\n                        </Form.Field>\n                    </Content>\n                }\n            </Card.Footer>\n        </Card>\n    )\n}\n\nexport function ObjectWallet() {\n\n    const [globalState] = useContext(StoreContext)\n    const [state, setState] = useState({\n        loading: true,\n        dids: {} as DidList,\n    })\n\n    if (globalState.userTree === undefined) {\n        throw new Error(\"must have a userTree to use ObjectWallet\")\n    }\n\n    const onSend = async (evt: IOnSendEvent) => {\n        setState((s) => {\n            return { ...s, dids: evt.dids }\n        })\n    }\n\n    useEffect(() => {\n        const getObjects = async () => {\n            if (globalState.userTree === undefined) {\n                throw new Error(\"user tree has to be defined\")\n            }\n            const tResp = await globalState.userTree.resolveData(\"/_wallet/nfts\")\n            setState((s) => {\n                return { ...s, loading: false, dids: (tResp.value || {}) }\n            })\n        }\n\n        if (globalState.userTree) {\n            getObjects()\n        }\n    }, [globalState.userTree])\n\n    const cards = Object.keys(state.dids).map((did) => {\n        if (globalState.userTree === undefined) {\n            throw new Error(\"must hae a user tree to list dids\")\n        }\n        return (\n            <Columns.Column key={did} size={3}>\n                <NFTCard userTree={globalState.userTree} onSend={onSend} did={did} />\n            </Columns.Column>\n        )\n    })\n\n    const handleAdd = function(did:string) {\n        setState((s) => {\n            return {...s, dids: {...state.dids, [did]: Date.now()}}\n        })\n    }\n\n    return (\n        <div>\n            <Columns>\n                {state.loading && <Loader />}\n                {cards}\n            </Columns>\n            <AddObjectForm onAdd={handleAdd} userTree={globalState.userTree} />\n        </div>\n    )\n}\n\nconst AddObjectForm = ({ userTree, onAdd }: { userTree: ChainTree, onAdd:Function }) => {\n    const [state, setState] = useState({\n        addOpen: false,\n        addDid: \"\",\n        addLoading: false,\n    })\n\n    const handleAdd = () => {\n        setState({ ...state, addLoading: true })\n        const did = state.addDid\n        const doAsync = async () => {\n            if (userTree === undefined || userTree.key === undefined) {\n                throw new Error(\"user tree undfined\")\n            }\n\n            const c = await getAppCommunity()\n            const nftTip = await c.getTip(did)\n            const nftTree = new ChainTree({\n                store: c.blockservice,\n                tip: nftTip,\n            })\n            let userAddr = await Tupelo.ecdsaPubkeyToAddress(userTree.key.publicKey)\n            let resolveResp = await nftTree.resolve(\"tree/_tupelo/authentications\")\n            let auths: string[] = resolveResp.value\n            if (auths.includes(userAddr)) {\n                // this tree does belong to the user\n                await txsWithCommunityWait(userTree, [\n                    setDataTransaction(\"/_wallet/nfts/\" + did, Date.now())\n                ])\n                onAdd(did)\n                setState({ ...state, addLoading: false, addDid: \"\" })\n            }\n            setState({ ...state, addLoading: false, addDid: \"\",addOpen: false })\n        }\n        doAsync()\n    }\n\n    const AddForm = ()=> {\n        if (state.addLoading) {\n            return <Loader/>\n        }\n        return (\n        <Box>\n        <Form.Field>\n            <Form.Label>Add</Form.Label>\n            <Form.Control>\n                <Form.Input value={state.addDid} onChange={(evt) => { setState({ ...state, addDid: evt.target.value }) }} name=\"additionalDid\" placeholder=\"DID\" />\n            </Form.Control>\n        </Form.Field>\n        <Form.Field kind=\"group\">\n            <Button onClick={handleAdd} color=\"primary\">Add</Button>\n            <Button text onClick={() => { setState((s) => { return { ...s, addOpen: false, addDid: '' } }) }}>Cancel</Button>\n        </Form.Field>\n        </Box>\n        )\n    }\n\n    return (\n        <div>\n            {state.addOpen ?\n                <AddForm/>\n                :\n                <Button onClick={() => { setState((s) => { return { ...s, addOpen: true } }) }}>Add</Button>\n            }\n        </div>\n    )\n}","import { EcdsaKey, Tupelo, ChainTree } from \"tupelo-wasm-sdk\"\nimport { getAppCommunity } from \"./appcommunity\"\n\nexport const usernameKey = \"/_wallet/username\"\nexport const namespace = Buffer.from(\"_wallet-dev\")\n\n/**\n * Generates a public/private keypair from an *insecure* passphrase.\n * This method is used to generate a ChainTree with a known name (given a namespace)\n * The very first thing you do with the ChainTree should be to ChangeOwner\n * @param userName - the username\n */\nexport const publicUserKey = (userName: string) => {\n    return EcdsaKey.passPhraseKey(Buffer.from(userName), namespace)\n}\n\nexport const didFromUserName = async (userName: string) => {\n    const userKey = await publicUserKey(userName)\n    return Tupelo.ecdsaPubkeyToDid(userKey.publicKey)\n}\n\nexport const getUserTree = async (userName: string) => {\n    const c = await getAppCommunity()\n    const userDid = await didFromUserName(userName)\n    let userTip\n    try {\n        userTip = await c.getTip(userDid)\n    } catch(e) {\n        throw e\n    }\n\n    return new ChainTree({\n        store: c.blockservice,\n        tip: userTip\n    })\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 534;"],"sourceRoot":""}